
GccApplicationCpp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00800100  00000a4c  00000ae0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a3  00800176  00800176  00000b56  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b56  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000330  00000000  00000000  00000bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006b63  00000000  00000000  00000ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001331  00000000  00000000  00007a5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018fc  00000000  00000000  00008d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000880  00000000  00000000  0000a688  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001b09  00000000  00000000  0000af08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002dcb  00000000  00000000  0000ca11  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b8  00000000  00000000  0000f7dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 38 03 	jmp	0x670	; 0x670 <__vector_14>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 91 01 	jmp	0x322	; 0x322 <__vector_18>
  4c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__vector_19>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	ef 01       	movw	r28, r30

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	ec e4       	ldi	r30, 0x4C	; 76
  7e:	fa e0       	ldi	r31, 0x0A	; 10
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	a6 37       	cpi	r26, 0x76	; 118
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	22 e0       	ldi	r18, 0x02	; 2
  8e:	a6 e7       	ldi	r26, 0x76	; 118
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	a9 31       	cpi	r26, 0x19	; 25
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 0e 03 	call	0x61c	; 0x61c <main>
  b6:	0c 94 24 05 	jmp	0xa48	; 0xa48 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <_ZN14HardwareSerial9availableEv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
  be:	fc 01       	movw	r30, r24
  c0:	91 8d       	ldd	r25, Z+25	; 0x19
  c2:	22 8d       	ldd	r18, Z+26	; 0x1a
  c4:	89 2f       	mov	r24, r25
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	80 5c       	subi	r24, 0xC0	; 192
  ca:	9f 4f       	sbci	r25, 0xFF	; 255
  cc:	82 1b       	sub	r24, r18
  ce:	91 09       	sbc	r25, r1
  d0:	8f 73       	andi	r24, 0x3F	; 63
  d2:	99 27       	eor	r25, r25
  d4:	08 95       	ret

000000d6 <_ZN14HardwareSerial4peekEv>:
  d6:	fc 01       	movw	r30, r24
  d8:	91 8d       	ldd	r25, Z+25	; 0x19
  da:	82 8d       	ldd	r24, Z+26	; 0x1a
  dc:	98 17       	cp	r25, r24
  de:	31 f0       	breq	.+12     	; 0xec <_ZN14HardwareSerial4peekEv+0x16>
  e0:	82 8d       	ldd	r24, Z+26	; 0x1a
  e2:	e8 0f       	add	r30, r24
  e4:	f1 1d       	adc	r31, r1
  e6:	85 8d       	ldd	r24, Z+29	; 0x1d
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	08 95       	ret
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	9f ef       	ldi	r25, 0xFF	; 255
  f0:	08 95       	ret

000000f2 <_ZN14HardwareSerial4readEv>:
  f2:	fc 01       	movw	r30, r24
  f4:	91 8d       	ldd	r25, Z+25	; 0x19
  f6:	82 8d       	ldd	r24, Z+26	; 0x1a
  f8:	98 17       	cp	r25, r24
  fa:	61 f0       	breq	.+24     	; 0x114 <_ZN14HardwareSerial4readEv+0x22>
  fc:	82 8d       	ldd	r24, Z+26	; 0x1a
  fe:	df 01       	movw	r26, r30
 100:	a8 0f       	add	r26, r24
 102:	b1 1d       	adc	r27, r1
 104:	5d 96       	adiw	r26, 0x1d	; 29
 106:	8c 91       	ld	r24, X
 108:	92 8d       	ldd	r25, Z+26	; 0x1a
 10a:	9f 5f       	subi	r25, 0xFF	; 255
 10c:	9f 73       	andi	r25, 0x3F	; 63
 10e:	92 8f       	std	Z+26, r25	; 0x1a
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	08 95       	ret
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	9f ef       	ldi	r25, 0xFF	; 255
 118:	08 95       	ret

0000011a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 11a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 11c:	84 8d       	ldd	r24, Z+28	; 0x1c
 11e:	df 01       	movw	r26, r30
 120:	a8 0f       	add	r26, r24
 122:	b1 1d       	adc	r27, r1
 124:	a3 5a       	subi	r26, 0xA3	; 163
 126:	bf 4f       	sbci	r27, 0xFF	; 255
 128:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 12a:	24 8d       	ldd	r18, Z+28	; 0x1c
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	2f 5f       	subi	r18, 0xFF	; 255
 130:	3f 4f       	sbci	r19, 0xFF	; 255
 132:	2f 73       	andi	r18, 0x3F	; 63
 134:	30 78       	andi	r19, 0x80	; 128
 136:	33 23       	and	r19, r19
 138:	34 f4       	brge	.+12     	; 0x146 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	31 09       	sbc	r19, r1
 13e:	20 6c       	ori	r18, 0xC0	; 192
 140:	3f 6f       	ori	r19, 0xFF	; 255
 142:	2f 5f       	subi	r18, 0xFF	; 255
 144:	3f 4f       	sbci	r19, 0xFF	; 255
 146:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
 148:	a6 89       	ldd	r26, Z+22	; 0x16
 14a:	b7 89       	ldd	r27, Z+23	; 0x17
 14c:	8c 93       	st	X, r24

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 14e:	a0 89       	ldd	r26, Z+16	; 0x10
 150:	b1 89       	ldd	r27, Z+17	; 0x11
 152:	8c 91       	ld	r24, X
 154:	80 64       	ori	r24, 0x40	; 64
 156:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 158:	93 8d       	ldd	r25, Z+27	; 0x1b
 15a:	84 8d       	ldd	r24, Z+28	; 0x1c
 15c:	98 13       	cpse	r25, r24
 15e:	06 c0       	rjmp	.+12     	; 0x16c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x52>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 160:	02 88       	ldd	r0, Z+18	; 0x12
 162:	f3 89       	ldd	r31, Z+19	; 0x13
 164:	e0 2d       	mov	r30, r0
 166:	80 81       	ld	r24, Z
 168:	8f 7d       	andi	r24, 0xDF	; 223
 16a:	80 83       	st	Z, r24
 16c:	08 95       	ret

0000016e <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 174:	88 8d       	ldd	r24, Y+24	; 0x18
 176:	81 11       	cpse	r24, r1
 178:	0f c0       	rjmp	.+30     	; 0x198 <_ZN14HardwareSerial5flushEv+0x2a>
 17a:	18 c0       	rjmp	.+48     	; 0x1ac <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	07 fc       	sbrc	r0, 7
 180:	0d c0       	rjmp	.+26     	; 0x19c <_ZN14HardwareSerial5flushEv+0x2e>
 182:	90 81       	ld	r25, Z
 184:	95 ff       	sbrs	r25, 5
 186:	0a c0       	rjmp	.+20     	; 0x19c <_ZN14HardwareSerial5flushEv+0x2e>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 188:	a8 89       	ldd	r26, Y+16	; 0x10
 18a:	b9 89       	ldd	r27, Y+17	; 0x11
 18c:	8c 91       	ld	r24, X
 18e:	85 ff       	sbrs	r24, 5
 190:	05 c0       	rjmp	.+10     	; 0x19c <_ZN14HardwareSerial5flushEv+0x2e>
	  _tx_udr_empty_irq();
 192:	ce 01       	movw	r24, r28
 194:	0e 94 8d 00 	call	0x11a	; 0x11a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 198:	ea 89       	ldd	r30, Y+18	; 0x12
 19a:	fb 89       	ldd	r31, Y+19	; 0x13
 19c:	90 81       	ld	r25, Z
 19e:	95 fd       	sbrc	r25, 5
 1a0:	ed cf       	rjmp	.-38     	; 0x17c <_ZN14HardwareSerial5flushEv+0xe>
 1a2:	a8 89       	ldd	r26, Y+16	; 0x10
 1a4:	b9 89       	ldd	r27, Y+17	; 0x11
 1a6:	8c 91       	ld	r24, X
 1a8:	86 ff       	sbrs	r24, 6
 1aa:	e8 cf       	rjmp	.-48     	; 0x17c <_ZN14HardwareSerial5flushEv+0xe>
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
 1b2:	0f 93       	push	r16
 1b4:	1f 93       	push	r17
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	fc 01       	movw	r30, r24
  _written = true;
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	80 8f       	std	Z+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 1c0:	93 8d       	ldd	r25, Z+27	; 0x1b
 1c2:	84 8d       	ldd	r24, Z+28	; 0x1c
 1c4:	98 13       	cpse	r25, r24
 1c6:	22 c0       	rjmp	.+68     	; 0x20c <_ZN14HardwareSerial5writeEh+0x5a>
 1c8:	a0 89       	ldd	r26, Z+16	; 0x10
 1ca:	b1 89       	ldd	r27, Z+17	; 0x11
 1cc:	8c 91       	ld	r24, X
 1ce:	85 fd       	sbrc	r24, 5
 1d0:	2f c0       	rjmp	.+94     	; 0x230 <_ZN14HardwareSerial5writeEh+0x7e>
 1d2:	1c c0       	rjmp	.+56     	; 0x20c <_ZN14HardwareSerial5writeEh+0x5a>
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    if (bit_is_clear(SREG, SREG_I)) {
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	07 fc       	sbrc	r0, 7
 1d8:	08 c0       	rjmp	.+16     	; 0x1ea <_ZN14HardwareSerial5writeEh+0x38>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 1da:	e8 89       	ldd	r30, Y+16	; 0x10
 1dc:	f9 89       	ldd	r31, Y+17	; 0x11
 1de:	80 81       	ld	r24, Z
 1e0:	85 ff       	sbrs	r24, 5
 1e2:	03 c0       	rjmp	.+6      	; 0x1ea <_ZN14HardwareSerial5writeEh+0x38>
	_tx_udr_empty_irq();
 1e4:	ce 01       	movw	r24, r28
 1e6:	0e 94 8d 00 	call	0x11a	; 0x11a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 1ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
 1ec:	09 17       	cp	r16, r25
 1ee:	91 f3       	breq	.-28     	; 0x1d4 <_ZN14HardwareSerial5writeEh+0x22>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 1f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
 1f2:	fe 01       	movw	r30, r28
 1f4:	e8 0f       	add	r30, r24
 1f6:	f1 1d       	adc	r31, r1
 1f8:	e3 5a       	subi	r30, 0xA3	; 163
 1fa:	ff 4f       	sbci	r31, 0xFF	; 255
 1fc:	10 83       	st	Z, r17
  _tx_buffer_head = i;
 1fe:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 200:	ea 89       	ldd	r30, Y+18	; 0x12
 202:	fb 89       	ldd	r31, Y+19	; 0x13
 204:	80 81       	ld	r24, Z
 206:	80 62       	ori	r24, 0x20	; 32
 208:	80 83       	st	Z, r24
  
  return 1;
 20a:	1b c0       	rjmp	.+54     	; 0x242 <_ZN14HardwareSerial5writeEh+0x90>
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 20c:	23 8d       	ldd	r18, Z+27	; 0x1b
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	2f 5f       	subi	r18, 0xFF	; 255
 212:	3f 4f       	sbci	r19, 0xFF	; 255
 214:	2f 73       	andi	r18, 0x3F	; 63
 216:	30 78       	andi	r19, 0x80	; 128
 218:	33 23       	and	r19, r19
 21a:	34 f4       	brge	.+12     	; 0x228 <_ZN14HardwareSerial5writeEh+0x76>
 21c:	21 50       	subi	r18, 0x01	; 1
 21e:	31 09       	sbc	r19, r1
 220:	20 6c       	ori	r18, 0xC0	; 192
 222:	3f 6f       	ori	r19, 0xFF	; 255
 224:	2f 5f       	subi	r18, 0xFF	; 255
 226:	3f 4f       	sbci	r19, 0xFF	; 255
 228:	16 2f       	mov	r17, r22
 22a:	ef 01       	movw	r28, r30
 22c:	02 2f       	mov	r16, r18
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 22e:	dd cf       	rjmp	.-70     	; 0x1ea <_ZN14HardwareSerial5writeEh+0x38>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 230:	a6 89       	ldd	r26, Z+22	; 0x16
 232:	b7 89       	ldd	r27, Z+23	; 0x17
 234:	6c 93       	st	X, r22
    sbi(*_ucsra, TXC0);
 236:	00 88       	ldd	r0, Z+16	; 0x10
 238:	f1 89       	ldd	r31, Z+17	; 0x11
 23a:	e0 2d       	mov	r30, r0
 23c:	80 81       	ld	r24, Z
 23e:	80 64       	ori	r24, 0x40	; 64
 240:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	1f 91       	pop	r17
 24c:	0f 91       	pop	r16
 24e:	08 95       	ret

00000250 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 250:	bf 92       	push	r11
 252:	cf 92       	push	r12
 254:	df 92       	push	r13
 256:	ef 92       	push	r14
 258:	ff 92       	push	r15
 25a:	0f 93       	push	r16
 25c:	1f 93       	push	r17
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	ec 01       	movw	r28, r24
 264:	6a 01       	movw	r12, r20
 266:	7b 01       	movw	r14, r22
 268:	b2 2e       	mov	r11, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 26a:	e8 89       	ldd	r30, Y+16	; 0x10
 26c:	f9 89       	ldd	r31, Y+17	; 0x11
 26e:	82 e0       	ldi	r24, 0x02	; 2
 270:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 272:	41 15       	cp	r20, r1
 274:	51 4e       	sbci	r21, 0xE1	; 225
 276:	61 05       	cpc	r22, r1
 278:	71 05       	cpc	r23, r1
 27a:	b1 f0       	breq	.+44     	; 0x2a8 <_ZN14HardwareSerial5beginEmh+0x58>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 27c:	60 e0       	ldi	r22, 0x00	; 0
 27e:	79 e0       	ldi	r23, 0x09	; 9
 280:	8d e3       	ldi	r24, 0x3D	; 61
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	a7 01       	movw	r20, r14
 286:	96 01       	movw	r18, r12
 288:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__udivmodsi4>
 28c:	89 01       	movw	r16, r18
 28e:	9a 01       	movw	r18, r20
 290:	01 50       	subi	r16, 0x01	; 1
 292:	11 09       	sbc	r17, r1
 294:	21 09       	sbc	r18, r1
 296:	31 09       	sbc	r19, r1
 298:	36 95       	lsr	r19
 29a:	27 95       	ror	r18
 29c:	17 95       	ror	r17
 29e:	07 95       	ror	r16
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 2a0:	01 15       	cp	r16, r1
 2a2:	80 e1       	ldi	r24, 0x10	; 16
 2a4:	18 07       	cpc	r17, r24
 2a6:	a8 f0       	brcs	.+42     	; 0x2d2 <_ZN14HardwareSerial5beginEmh+0x82>
  {
    *_ucsra = 0;
 2a8:	e8 89       	ldd	r30, Y+16	; 0x10
 2aa:	f9 89       	ldd	r31, Y+17	; 0x11
 2ac:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 2ae:	60 e8       	ldi	r22, 0x80	; 128
 2b0:	74 e8       	ldi	r23, 0x84	; 132
 2b2:	8e e1       	ldi	r24, 0x1E	; 30
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	a7 01       	movw	r20, r14
 2b8:	96 01       	movw	r18, r12
 2ba:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__udivmodsi4>
 2be:	da 01       	movw	r26, r20
 2c0:	c9 01       	movw	r24, r18
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	a1 09       	sbc	r26, r1
 2c6:	b1 09       	sbc	r27, r1
 2c8:	b6 95       	lsr	r27
 2ca:	a7 95       	ror	r26
 2cc:	97 95       	ror	r25
 2ce:	87 95       	ror	r24
 2d0:	8c 01       	movw	r16, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 2d2:	ec 85       	ldd	r30, Y+12	; 0x0c
 2d4:	fd 85       	ldd	r31, Y+13	; 0x0d
 2d6:	10 83       	st	Z, r17
  *_ubrrl = baud_setting;
 2d8:	ee 85       	ldd	r30, Y+14	; 0x0e
 2da:	ff 85       	ldd	r31, Y+15	; 0x0f
 2dc:	00 83       	st	Z, r16

  _written = false;
 2de:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 2e0:	ec 89       	ldd	r30, Y+20	; 0x14
 2e2:	fd 89       	ldd	r31, Y+21	; 0x15
 2e4:	b0 82       	st	Z, r11
  
  sbi(*_ucsrb, RXEN0);
 2e6:	ea 89       	ldd	r30, Y+18	; 0x12
 2e8:	fb 89       	ldd	r31, Y+19	; 0x13
 2ea:	80 81       	ld	r24, Z
 2ec:	80 61       	ori	r24, 0x10	; 16
 2ee:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 2f0:	ea 89       	ldd	r30, Y+18	; 0x12
 2f2:	fb 89       	ldd	r31, Y+19	; 0x13
 2f4:	80 81       	ld	r24, Z
 2f6:	88 60       	ori	r24, 0x08	; 8
 2f8:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 2fa:	ea 89       	ldd	r30, Y+18	; 0x12
 2fc:	fb 89       	ldd	r31, Y+19	; 0x13
 2fe:	80 81       	ld	r24, Z
 300:	80 68       	ori	r24, 0x80	; 128
 302:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 304:	ea 89       	ldd	r30, Y+18	; 0x12
 306:	fb 89       	ldd	r31, Y+19	; 0x13
 308:	80 81       	ld	r24, Z
 30a:	8f 7d       	andi	r24, 0xDF	; 223
 30c:	80 83       	st	Z, r24
}
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	1f 91       	pop	r17
 314:	0f 91       	pop	r16
 316:	ff 90       	pop	r15
 318:	ef 90       	pop	r14
 31a:	df 90       	pop	r13
 31c:	cf 90       	pop	r12
 31e:	bf 90       	pop	r11
 320:	08 95       	ret

00000322 <__vector_18>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
 322:	1f 92       	push	r1
 324:	0f 92       	push	r0
 326:	0f b6       	in	r0, 0x3f	; 63
 328:	0f 92       	push	r0
 32a:	11 24       	eor	r1, r1
 32c:	2f 93       	push	r18
 32e:	8f 93       	push	r24
 330:	9f 93       	push	r25
 332:	af 93       	push	r26
 334:	bf 93       	push	r27
 336:	ef 93       	push	r30
 338:	ff 93       	push	r31
 33a:	e0 91 86 01 	lds	r30, 0x0186	; 0x800186 <__data_end+0x10>
 33e:	f0 91 87 01 	lds	r31, 0x0187	; 0x800187 <__data_end+0x11>
 342:	80 81       	ld	r24, Z
 344:	82 fd       	sbrc	r24, 2
 346:	14 c0       	rjmp	.+40     	; 0x370 <__vector_18+0x4e>
 348:	e6 e7       	ldi	r30, 0x76	; 118
 34a:	f1 e0       	ldi	r31, 0x01	; 1
 34c:	a6 89       	ldd	r26, Z+22	; 0x16
 34e:	b7 89       	ldd	r27, Z+23	; 0x17
 350:	2c 91       	ld	r18, X
 352:	81 8d       	ldd	r24, Z+25	; 0x19
 354:	8f 5f       	subi	r24, 0xFF	; 255
 356:	8f 73       	andi	r24, 0x3F	; 63
 358:	92 8d       	ldd	r25, Z+26	; 0x1a
 35a:	89 17       	cp	r24, r25
 35c:	71 f0       	breq	.+28     	; 0x37a <__vector_18+0x58>
 35e:	df 01       	movw	r26, r30
 360:	e1 8d       	ldd	r30, Z+25	; 0x19
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	ea 58       	subi	r30, 0x8A	; 138
 366:	fe 4f       	sbci	r31, 0xFE	; 254
 368:	25 8f       	std	Z+29, r18	; 0x1d
 36a:	59 96       	adiw	r26, 0x19	; 25
 36c:	8c 93       	st	X, r24
 36e:	05 c0       	rjmp	.+10     	; 0x37a <__vector_18+0x58>
 370:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <__data_end+0x16>
 374:	f0 91 8d 01 	lds	r31, 0x018D	; 0x80018d <__data_end+0x17>
 378:	80 81       	ld	r24, Z
 37a:	ff 91       	pop	r31
 37c:	ef 91       	pop	r30
 37e:	bf 91       	pop	r27
 380:	af 91       	pop	r26
 382:	9f 91       	pop	r25
 384:	8f 91       	pop	r24
 386:	2f 91       	pop	r18
 388:	0f 90       	pop	r0
 38a:	0f be       	out	0x3f, r0	; 63
 38c:	0f 90       	pop	r0
 38e:	1f 90       	pop	r1
 390:	18 95       	reti

00000392 <__vector_19>:
 392:	1f 92       	push	r1
 394:	0f 92       	push	r0
 396:	0f b6       	in	r0, 0x3f	; 63
 398:	0f 92       	push	r0
 39a:	11 24       	eor	r1, r1
 39c:	2f 93       	push	r18
 39e:	3f 93       	push	r19
 3a0:	4f 93       	push	r20
 3a2:	5f 93       	push	r21
 3a4:	6f 93       	push	r22
 3a6:	7f 93       	push	r23
 3a8:	8f 93       	push	r24
 3aa:	9f 93       	push	r25
 3ac:	af 93       	push	r26
 3ae:	bf 93       	push	r27
 3b0:	ef 93       	push	r30
 3b2:	ff 93       	push	r31
 3b4:	86 e7       	ldi	r24, 0x76	; 118
 3b6:	91 e0       	ldi	r25, 0x01	; 1
 3b8:	0e 94 8d 00 	call	0x11a	; 0x11a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 3bc:	ff 91       	pop	r31
 3be:	ef 91       	pop	r30
 3c0:	bf 91       	pop	r27
 3c2:	af 91       	pop	r26
 3c4:	9f 91       	pop	r25
 3c6:	8f 91       	pop	r24
 3c8:	7f 91       	pop	r23
 3ca:	6f 91       	pop	r22
 3cc:	5f 91       	pop	r21
 3ce:	4f 91       	pop	r20
 3d0:	3f 91       	pop	r19
 3d2:	2f 91       	pop	r18
 3d4:	0f 90       	pop	r0
 3d6:	0f be       	out	0x3f, r0	; 63
 3d8:	0f 90       	pop	r0
 3da:	1f 90       	pop	r1
 3dc:	18 95       	reti

000003de <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 3de:	e6 e7       	ldi	r30, 0x76	; 118
 3e0:	f1 e0       	ldi	r31, 0x01	; 1
 3e2:	13 82       	std	Z+3, r1	; 0x03
 3e4:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 3e6:	88 ee       	ldi	r24, 0xE8	; 232
 3e8:	93 e0       	ldi	r25, 0x03	; 3
 3ea:	a0 e0       	ldi	r26, 0x00	; 0
 3ec:	b0 e0       	ldi	r27, 0x00	; 0
 3ee:	84 83       	std	Z+4, r24	; 0x04
 3f0:	95 83       	std	Z+5, r25	; 0x05
 3f2:	a6 83       	std	Z+6, r26	; 0x06
 3f4:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 3f6:	89 e6       	ldi	r24, 0x69	; 105
 3f8:	91 e0       	ldi	r25, 0x01	; 1
 3fa:	91 83       	std	Z+1, r25	; 0x01
 3fc:	80 83       	st	Z, r24
 3fe:	85 ec       	ldi	r24, 0xC5	; 197
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	95 87       	std	Z+13, r25	; 0x0d
 404:	84 87       	std	Z+12, r24	; 0x0c
 406:	84 ec       	ldi	r24, 0xC4	; 196
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	97 87       	std	Z+15, r25	; 0x0f
 40c:	86 87       	std	Z+14, r24	; 0x0e
 40e:	80 ec       	ldi	r24, 0xC0	; 192
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	91 8b       	std	Z+17, r25	; 0x11
 414:	80 8b       	std	Z+16, r24	; 0x10
 416:	81 ec       	ldi	r24, 0xC1	; 193
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	93 8b       	std	Z+19, r25	; 0x13
 41c:	82 8b       	std	Z+18, r24	; 0x12
 41e:	82 ec       	ldi	r24, 0xC2	; 194
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	95 8b       	std	Z+21, r25	; 0x15
 424:	84 8b       	std	Z+20, r24	; 0x14
 426:	86 ec       	ldi	r24, 0xC6	; 198
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	97 8b       	std	Z+23, r25	; 0x17
 42c:	86 8b       	std	Z+22, r24	; 0x16
 42e:	11 8e       	std	Z+25, r1	; 0x19
 430:	12 8e       	std	Z+26, r1	; 0x1a
 432:	13 8e       	std	Z+27, r1	; 0x1b
 434:	14 8e       	std	Z+28, r1	; 0x1c
 436:	08 95       	ret

00000438 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 438:	cf 92       	push	r12
 43a:	df 92       	push	r13
 43c:	ef 92       	push	r14
 43e:	ff 92       	push	r15
 440:	0f 93       	push	r16
 442:	1f 93       	push	r17
 444:	cf 93       	push	r28
 446:	df 93       	push	r29
  size_t n = 0;
  while (size--) {
 448:	41 15       	cp	r20, r1
 44a:	51 05       	cpc	r21, r1
 44c:	b1 f0       	breq	.+44     	; 0x47a <_ZN5Print5writeEPKhj+0x42>
 44e:	8c 01       	movw	r16, r24
 450:	e6 2e       	mov	r14, r22
 452:	f7 2e       	mov	r15, r23
 454:	ea 01       	movw	r28, r20
 456:	c1 2c       	mov	r12, r1
 458:	d1 2c       	mov	r13, r1
    n += write(*buffer++);
 45a:	d7 01       	movw	r26, r14
 45c:	6d 91       	ld	r22, X+
 45e:	7d 01       	movw	r14, r26
 460:	d8 01       	movw	r26, r16
 462:	ed 91       	ld	r30, X+
 464:	fc 91       	ld	r31, X
 466:	01 90       	ld	r0, Z+
 468:	f0 81       	ld	r31, Z
 46a:	e0 2d       	mov	r30, r0
 46c:	c8 01       	movw	r24, r16
 46e:	09 95       	icall
 470:	c8 0e       	add	r12, r24
 472:	d9 1e       	adc	r13, r25
 474:	21 97       	sbiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 476:	89 f7       	brne	.-30     	; 0x45a <_ZN5Print5writeEPKhj+0x22>
 478:	02 c0       	rjmp	.+4      	; 0x47e <_ZN5Print5writeEPKhj+0x46>
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
 47a:	c1 2c       	mov	r12, r1
 47c:	d1 2c       	mov	r13, r1
  while (size--) {
    n += write(*buffer++);
  }
  return n;
}
 47e:	c6 01       	movw	r24, r12
 480:	df 91       	pop	r29
 482:	cf 91       	pop	r28
 484:	1f 91       	pop	r17
 486:	0f 91       	pop	r16
 488:	ff 90       	pop	r15
 48a:	ef 90       	pop	r14
 48c:	df 90       	pop	r13
 48e:	cf 90       	pop	r12
 490:	08 95       	ret

00000492 <dio_Init>:
 *  \pre        dio_InitMemory has been called unless dio_ModuleInitialized is initialized by start-up code.
 *  \note       Specification of module initialization
 **********************************************************************************************************************/
void dio_Init(uint8 trcvType_local)
{
    PORTB = PORTB_INIT;
 492:	9f e3       	ldi	r25, 0x3F	; 63
 494:	95 b9       	out	0x05, r25	; 5
    DDRB = DDRB_INIT;
 496:	14 b8       	out	0x04, r1	; 4

    PORTC = PORTC_INIT;
 498:	29 e3       	ldi	r18, 0x39	; 57
 49a:	28 b9       	out	0x08, r18	; 8
    DDRC = DDRC_INIT;
 49c:	97 b9       	out	0x07, r25	; 7

    PORTD = PORTD_INIT;
 49e:	9c e7       	ldi	r25, 0x7C	; 124
 4a0:	9b b9       	out	0x0b, r25	; 11
    DDRD = DDRD_INIT;
 4a2:	90 e7       	ldi	r25, 0x70	; 112
 4a4:	9a b9       	out	0x0a, r25	; 10

  // configure DIO pins to be compatible with Trcv. Tja1080
  // configure STBN, FR_TXD and EN as output.
  if(trcvType_local == 0x00 || trcvType_local == 0x01)
 4a6:	82 30       	cpi	r24, 0x02	; 2
 4a8:	30 f4       	brcc	.+12     	; 0x4b6 <dio_Init+0x24>
  {
    DDRB |= (1<<DDB5) | (1<<DDB3) | (1<<DDB1) ;
 4aa:	84 b1       	in	r24, 0x04	; 4
 4ac:	8a 62       	ori	r24, 0x2A	; 42
 4ae:	84 b9       	out	0x04, r24	; 4
    EN_HIGH();
 4b0:	2d 9a       	sbi	0x05, 5	; 5
    STBN_HIGH();
 4b2:	2b 9a       	sbi	0x05, 3	; 5
    FR_TXD_HIGH();
 4b4:	29 9a       	sbi	0x05, 1	; 5
 4b6:	08 95       	ret

000004b8 <dio_ResetPins>:
}

void dio_ResetPins()
{
  //test transceiver
  STBN_HIGH();
 4b8:	2b 9a       	sbi	0x05, 3	; 5
  FR_TXD_HIGH();
 4ba:	29 9a       	sbi	0x05, 1	; 5
  FR_TXEN_HIGH();
 4bc:	5d 9a       	sbi	0x0b, 5	; 11
  EN_HIGH();
 4be:	2d 9a       	sbi	0x05, 5	; 5

  //helping transceiver
  STBY_int_HIGH();
 4c0:	43 9a       	sbi	0x08, 3	; 8
  TXEN_int_HIGH();
 4c2:	5c 9a       	sbi	0x0b, 4	; 11
  TXD_int_HIGH();
 4c4:	5e 9a       	sbi	0x0b, 6	; 11
 4c6:	08 95       	ret

000004c8 <dio_WriteChannel>:
 *  \pre        -
 *  \note       -
 **********************************************************************************************************************/
void dio_WriteChannel(uint8 Channel, uint8 value)
{
  if (value == STD_HIGH)
 4c8:	61 30       	cpi	r22, 0x01	; 1
 4ca:	91 f4       	brne	.+36     	; 0x4f0 <dio_WriteChannel+0x28>
  {
    *PortPinDescriptorMap[Channel].pinPortOut |= PortPinDescriptorMap[Channel].pinBit;
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	fc 01       	movw	r30, r24
 4d0:	ee 0f       	add	r30, r30
 4d2:	ff 1f       	adc	r31, r31
 4d4:	ee 0f       	add	r30, r30
 4d6:	ff 1f       	adc	r31, r31
 4d8:	8e 0f       	add	r24, r30
 4da:	9f 1f       	adc	r25, r31
 4dc:	fc 01       	movw	r30, r24
 4de:	e0 50       	subi	r30, 0x00	; 0
 4e0:	ff 4f       	sbci	r31, 0xFF	; 255
 4e2:	a0 81       	ld	r26, Z
 4e4:	b1 81       	ldd	r27, Z+1	; 0x01
 4e6:	9c 91       	ld	r25, X
 4e8:	84 81       	ldd	r24, Z+4	; 0x04
 4ea:	89 2b       	or	r24, r25
 4ec:	8c 93       	st	X, r24
 4ee:	08 95       	ret
  }
  else
  if (value == STD_LOW)  
 4f0:	61 11       	cpse	r22, r1
 4f2:	12 c0       	rjmp	.+36     	; 0x518 <dio_WriteChannel+0x50>
  {
    *PortPinDescriptorMap[Channel].pinPortOut &= ~( PortPinDescriptorMap[Channel].pinBit );
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	fc 01       	movw	r30, r24
 4f8:	ee 0f       	add	r30, r30
 4fa:	ff 1f       	adc	r31, r31
 4fc:	ee 0f       	add	r30, r30
 4fe:	ff 1f       	adc	r31, r31
 500:	8e 0f       	add	r24, r30
 502:	9f 1f       	adc	r25, r31
 504:	fc 01       	movw	r30, r24
 506:	e0 50       	subi	r30, 0x00	; 0
 508:	ff 4f       	sbci	r31, 0xFF	; 255
 50a:	a0 81       	ld	r26, Z
 50c:	b1 81       	ldd	r27, Z+1	; 0x01
 50e:	9c 91       	ld	r25, X
 510:	84 81       	ldd	r24, Z+4	; 0x04
 512:	80 95       	com	r24
 514:	89 23       	and	r24, r25
 516:	8c 93       	st	X, r24
 518:	08 95       	ret

0000051a <dio_ReadChannel>:
 **********************************************************************************************************************/
uint8 dio_ReadChannel(uint8 Channel)
{
  uint8 retVal;

  retVal = (PortPinDescriptorMap[Channel].pinBit == (*PortPinDescriptorMap[Channel].pinPortIn & PortPinDescriptorMap[Channel].pinBit));
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	fc 01       	movw	r30, r24
 51e:	ee 0f       	add	r30, r30
 520:	ff 1f       	adc	r31, r31
 522:	ee 0f       	add	r30, r30
 524:	ff 1f       	adc	r31, r31
 526:	8e 0f       	add	r24, r30
 528:	9f 1f       	adc	r25, r31
 52a:	fc 01       	movw	r30, r24
 52c:	e0 50       	subi	r30, 0x00	; 0
 52e:	ff 4f       	sbci	r31, 0xFF	; 255
 530:	a2 81       	ldd	r26, Z+2	; 0x02
 532:	b3 81       	ldd	r27, Z+3	; 0x03
 534:	9c 91       	ld	r25, X
 536:	24 81       	ldd	r18, Z+4	; 0x04
 538:	92 23       	and	r25, r18
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	29 13       	cpse	r18, r25
 53e:	80 e0       	ldi	r24, 0x00	; 0
  return(retVal);
}
 540:	08 95       	ret

00000542 <spi_transfer>:
 **********************************************************************************************************************/
uint8 spi_transfer(uint8 data)
{
  uint8 result;

  SPDR = data;
 542:	8e bd       	out	0x2e, r24	; 46
  /* Wait for previous transfer to complete */
  while(0 != (SPSR & _BV(SPIF)));
 544:	0d b4       	in	r0, 0x2d	; 45
 546:	07 fc       	sbrc	r0, 7
 548:	fd cf       	rjmp	.-6      	; 0x544 <spi_transfer+0x2>
  result = SPDR;
 54a:	8e b5       	in	r24, 0x2e	; 46

  return(result);
}
 54c:	08 95       	ret

0000054e <trcvDio_ReadWord>:
  *  \pre        The module has to be initialized.
  *  \pre        trcv_InitMemory has been called unless trcv_ModuleInitialized is initialized by start-up code.
  *  \note
  **********************************************************************************************************************/
  uint16 trcvDio_ReadWord(uint8 device)
  {
 54e:	0f 93       	push	r16
 550:	1f 93       	push	r17
 552:	cf 93       	push	r28
 554:	df 93       	push	r29
    Dio_LevelType TrcvEN;

    result = (FrTrcv_30_Tja1080_StatusWordType)0xFFFF; /* Initial state - no events */

    /* #10 Enter FRTRCV_30_TJA1080_EXCLUSIVE_AREA_1 as reading the status word is timing critical */
    disable(); /* PRQA S 3109 */ /* MD_MSR_14.3 */
 556:	f8 94       	cli
    /* #20 Preserve the current transceiver state given by EN */
    TrcvEN = dio_ReadChannel(dio_EN);
 558:	85 e0       	ldi	r24, 0x05	; 5
 55a:	0e 94 8d 02 	call	0x51a	; 0x51a <dio_ReadChannel>
 55e:	d8 2f       	mov	r29, r24

    /* #30 Create initial condition to read status word (either 14bits or 15bits depending on EN) */
    cnt=(uint8_least)15u;
    if( TrcvEN == (Dio_LevelType)STD_HIGH )
 560:	81 30       	cpi	r24, 0x01	; 1
 562:	29 f5       	brne	.+74     	; 0x5ae <trcvDio_ReadWord+0x60>
    { /* #40 Correct initial EN state (EN is clock signal) */
      cnt=(uint8_least)14u;
 564:	ce e0       	ldi	r28, 0x0E	; 14
 566:	24 c0       	rjmp	.+72     	; 0x5b0 <trcvDio_ReadWord+0x62>
    }

    for( ; cnt > (uint8_least)0u; cnt-- )
    {      
      /* #50 loop over all status bits and read them. Insert wait states for proper timing */
      dio_WriteChannel(dio_EN, (Dio_LevelType)STD_LOW);
 568:	60 e0       	ldi	r22, 0x00	; 0
 56a:	85 e0       	ldi	r24, 0x05	; 5
 56c:	0e 94 64 02 	call	0x4c8	; 0x4c8 <dio_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 570:	8a e0       	ldi	r24, 0x0A	; 10
 572:	8a 95       	dec	r24
 574:	f1 f7       	brne	.-4      	; 0x572 <trcvDio_ReadWord+0x24>
 576:	00 c0       	rjmp	.+0      	; 0x578 <trcvDio_ReadWord+0x2a>
      Appl_FrTrcv_30_Tja1080_Wait((uint8)kFrTrcv_30_Tja1080_delay_tEN_half);
      result <<= 1u;
 578:	00 0f       	add	r16, r16
 57a:	11 1f       	adc	r17, r17
      dio_WriteChannel(dio_EN, (Dio_LevelType)STD_HIGH);
 57c:	61 e0       	ldi	r22, 0x01	; 1
 57e:	85 e0       	ldi	r24, 0x05	; 5
 580:	0e 94 64 02 	call	0x4c8	; 0x4c8 <dio_WriteChannel>
 584:	8a e0       	ldi	r24, 0x0A	; 10
 586:	8a 95       	dec	r24
 588:	f1 f7       	brne	.-4      	; 0x586 <trcvDio_ReadWord+0x38>
 58a:	00 c0       	rjmp	.+0      	; 0x58c <trcvDio_ReadWord+0x3e>
      Appl_FrTrcv_30_Tja1080_Wait((uint8)kFrTrcv_30_Tja1080_delay_tEN_half);
      if( dio_ReadChannel(dio_ERRN) == (Dio_LevelType)STD_HIGH )
 58c:	84 e0       	ldi	r24, 0x04	; 4
 58e:	0e 94 8d 02 	call	0x51a	; 0x51a <dio_ReadChannel>
 592:	81 30       	cpi	r24, 0x01	; 1
 594:	09 f4       	brne	.+2      	; 0x598 <trcvDio_ReadWord+0x4a>
      {
        result |= (FrTrcv_30_Tja1080_StatusWordType)1u;
 596:	01 60       	ori	r16, 0x01	; 1
    if( TrcvEN == (Dio_LevelType)STD_HIGH )
    { /* #40 Correct initial EN state (EN is clock signal) */
      cnt=(uint8_least)14u;
    }

    for( ; cnt > (uint8_least)0u; cnt-- )
 598:	c1 50       	subi	r28, 0x01	; 1
 59a:	31 f7       	brne	.-52     	; 0x568 <trcvDio_ReadWord+0x1a>
        result |= (FrTrcv_30_Tja1080_StatusWordType)1u;
      }
    }

    /* #60 Restore previous transceiver state */
    dio_WriteChannel(dio_EN, TrcvEN);
 59c:	6d 2f       	mov	r22, r29
 59e:	85 e0       	ldi	r24, 0x05	; 5
 5a0:	0e 94 64 02 	call	0x4c8	; 0x4c8 <dio_WriteChannel>
    /* #70 Leave FRTRCV_30_TJA1080_EXCLUSIVE_AREA_1 as reading the status word is timing critical */
    enable(); /* PRQA S 3109 */ /* MD_MSR_14.3 */
 5a4:	78 94       	sei

    /* #80 High-active flags have to be returned, the transceiver delivers low-active flags --> invert them */
    return(result ^ (FrTrcv_30_Tja1080_StatusWordType)0xFFFF);
 5a6:	c8 01       	movw	r24, r16
 5a8:	80 95       	com	r24
 5aa:	90 95       	com	r25
 5ac:	04 c0       	rjmp	.+8      	; 0x5b6 <trcvDio_ReadWord+0x68>
    disable(); /* PRQA S 3109 */ /* MD_MSR_14.3 */
    /* #20 Preserve the current transceiver state given by EN */
    TrcvEN = dio_ReadChannel(dio_EN);

    /* #30 Create initial condition to read status word (either 14bits or 15bits depending on EN) */
    cnt=(uint8_least)15u;
 5ae:	cf e0       	ldi	r28, 0x0F	; 15
  *  \pre        The module has to be initialized.
  *  \pre        trcv_InitMemory has been called unless trcv_ModuleInitialized is initialized by start-up code.
  *  \note
  **********************************************************************************************************************/
  uint16 trcvDio_ReadWord(uint8 device)
  {
 5b0:	0f ef       	ldi	r16, 0xFF	; 255
 5b2:	1f ef       	ldi	r17, 0xFF	; 255
 5b4:	d9 cf       	rjmp	.-78     	; 0x568 <trcvDio_ReadWord+0x1a>
    /* #70 Leave FRTRCV_30_TJA1080_EXCLUSIVE_AREA_1 as reading the status word is timing critical */
    enable(); /* PRQA S 3109 */ /* MD_MSR_14.3 */

    /* #80 High-active flags have to be returned, the transceiver delivers low-active flags --> invert them */
    return(result ^ (FrTrcv_30_Tja1080_StatusWordType)0xFFFF);
  }
 5b6:	df 91       	pop	r29
 5b8:	cf 91       	pop	r28
 5ba:	1f 91       	pop	r17
 5bc:	0f 91       	pop	r16
 5be:	08 95       	ret

000005c0 <trcvDio_Init>:
  *  \pre        trcv_InitMemory has been called unless trcv_ModuleInitialized is initialized by start-up code.
  *  \note       Specification of module initialization
  **********************************************************************************************************************/
  void trcvDio_Init(uint8 trcvType_local)
  {  
    dio_Init(trcvType_local);
 5c0:	0e 94 49 02 	call	0x492	; 0x492 <dio_Init>
    trcvDio_ReadWord(0);
 5c4:	80 e0       	ldi	r24, 0x00	; 0
 5c6:	0e 94 a7 02 	call	0x54e	; 0x54e <trcvDio_ReadWord>
 5ca:	08 95       	ret

000005cc <trcvSpi_writeWord>:
 *  \pre        The module has to be initialized.
 *  \pre        trcv_InitMemory has been called unless trcv_ModuleInitialized is initialized by start-up code.
 *  \note       
 **********************************************************************************************************************/
uint16 trcvSpi_writeWord(uint16 data, uint8 device)
{
 5cc:	1f 93       	push	r17
 5ce:	cf 93       	push	r28
 5d0:	df 93       	push	r29
 5d2:	18 2f       	mov	r17, r24
 5d4:	89 2f       	mov	r24, r25
  uint16 result;

  /* Enable CS */
  if(device == 0)
 5d6:	61 11       	cpse	r22, r1
 5d8:	0f c0       	rjmp	.+30     	; 0x5f8 <trcvSpi_writeWord+0x2c>
  {
    CS1_ON();
 5da:	2a 9a       	sbi	0x05, 2	; 5
  {
    CS2_ON();
  }

  /* Read/Write 16 bit word */
  result  = (uint16)spi_transfer(data >> 8) << 8;
 5dc:	0e 94 a1 02 	call	0x542	; 0x542 <spi_transfer>
 5e0:	c8 2f       	mov	r28, r24
 5e2:	d0 e0       	ldi	r29, 0x00	; 0
 5e4:	dc 2f       	mov	r29, r28
 5e6:	cc 27       	eor	r28, r28
  result |= spi_transfer(data & 0xff);
 5e8:	81 2f       	mov	r24, r17
 5ea:	0e 94 a1 02 	call	0x542	; 0x542 <spi_transfer>
 5ee:	9e 01       	movw	r18, r28
 5f0:	28 2b       	or	r18, r24
 5f2:	c9 01       	movw	r24, r18

  /* Disable CS */
  if(device == 0)
  {
    CS1_OFF();
 5f4:	2a 98       	cbi	0x05, 2	; 5
 5f6:	0e c0       	rjmp	.+28     	; 0x614 <trcvSpi_writeWord+0x48>
  {
    CS1_ON();
  }
  else
  {
    CS2_ON();
 5f8:	44 9a       	sbi	0x08, 4	; 8
  }

  /* Read/Write 16 bit word */
  result  = (uint16)spi_transfer(data >> 8) << 8;
 5fa:	0e 94 a1 02 	call	0x542	; 0x542 <spi_transfer>
 5fe:	c8 2f       	mov	r28, r24
 600:	d0 e0       	ldi	r29, 0x00	; 0
 602:	dc 2f       	mov	r29, r28
 604:	cc 27       	eor	r28, r28
  result |= spi_transfer(data & 0xff);
 606:	81 2f       	mov	r24, r17
 608:	0e 94 a1 02 	call	0x542	; 0x542 <spi_transfer>
 60c:	9e 01       	movw	r18, r28
 60e:	28 2b       	or	r18, r24
 610:	c9 01       	movw	r24, r18
  {
    CS1_OFF();
  }
  else
  {
    CS2_OFF();
 612:	44 98       	cbi	0x08, 4	; 8
  }

  return(result);
}
 614:	df 91       	pop	r29
 616:	cf 91       	pop	r28
 618:	1f 91       	pop	r17
 61a:	08 95       	ret

0000061c <main>:
*  \pre        Module must be initialized
**********************************************************************************************************************/
static void init_timer()
{
  /* switch interrupt handling off */
  cli();
 61c:	f8 94       	cli
  /* ----- Implementation ----------------------------------------------- */
  /* Set up timer 0 as time base */
  // 1ms cycle
  TCCR0A = 0;   // set entire TCCR2A register to 0
 61e:	14 bc       	out	0x24, r1	; 36
  TCCR0B = 0;   // same for TCCR2B
 620:	15 bc       	out	0x25, r1	; 37
  TCNT0  = 0;   // initialize counter value to 0
 622:	16 bc       	out	0x26, r1	; 38
  OCR0A = 249;  // set compare match register = (16*10^6) / (1000*64) - 1 (must be <256)
 624:	89 ef       	ldi	r24, 0xF9	; 249
 626:	87 bd       	out	0x27, r24	; 39
  /* turn on CTC mode */
  TCCR0A |= _BV(WGM01);
 628:	84 b5       	in	r24, 0x24	; 36
 62a:	82 60       	ori	r24, 0x02	; 2
 62c:	84 bd       	out	0x24, r24	; 36
  /* Set CS01 and CS00 bits for 64 prescaler */
  TCCR0B |= _BV(CS01) | _BV(CS00);
 62e:	85 b5       	in	r24, 0x25	; 37
 630:	83 60       	ori	r24, 0x03	; 3
 632:	85 bd       	out	0x25, r24	; 37
  /* enable timer compare interrupt */
  TIMSK0 |= _BV(OCIE0A);
 634:	ee e6       	ldi	r30, 0x6E	; 110
 636:	f0 e0       	ldi	r31, 0x00	; 0
 638:	80 81       	ld	r24, Z
 63a:	82 60       	ori	r24, 0x02	; 2
 63c:	80 83       	st	Z, r24
  /* switch interrupt handling on */
  sei();
 63e:	78 94       	sei
{
  /* Set up timer 0 as time base */
  init_timer();

  /* Initialize all I/O ports and save initial state */
  protocol_Init();
 640:	0e 94 69 03 	call	0x6d2	; 0x6d2 <protocol_Init>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 644:	26 e0       	ldi	r18, 0x06	; 6
 646:	40 e0       	ldi	r20, 0x00	; 0
 648:	52 ec       	ldi	r21, 0xC2	; 194
 64a:	61 e0       	ldi	r22, 0x01	; 1
 64c:	70 e0       	ldi	r23, 0x00	; 0
 64e:	86 e7       	ldi	r24, 0x76	; 118
 650:	91 e0       	ldi	r25, 0x01	; 1
 652:	0e 94 28 01 	call	0x250	; 0x250 <_ZN14HardwareSerial5beginEmh>
 656:	07 c0       	rjmp	.+14     	; 0x666 <main+0x4a>
  while(1)
  {
    while(osTicks > 0u)
    {
      /* Call the protocol handler each 1ms and clear global interrupt variable*/
      osTicks--;
 658:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <osTicks>
 65c:	81 50       	subi	r24, 0x01	; 1
 65e:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <osTicks>
      protocol_Handler();
 662:	0e 94 b6 04 	call	0x96c	; 0x96c <protocol_Handler>
  Serial.begin(115200);
  
  /* nter endless loop */
  while(1)
  {
    while(osTicks > 0u)
 666:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <osTicks>
 66a:	81 11       	cpse	r24, r1
 66c:	f5 cf       	rjmp	.-22     	; 0x658 <main+0x3c>
 66e:	fb cf       	rjmp	.-10     	; 0x666 <main+0x4a>

00000670 <__vector_14>:
*  \details    Global variable is increase to indicate that task is ready to be executed. Resolution of timer interrupt is 1ms
*  \return     -
*  \pre        Module must be initialized
**********************************************************************************************************************/
ISR(TIMER0_COMPA_vect)
{
 670:	1f 92       	push	r1
 672:	0f 92       	push	r0
 674:	0f b6       	in	r0, 0x3f	; 63
 676:	0f 92       	push	r0
 678:	11 24       	eor	r1, r1
 67a:	8f 93       	push	r24
  /* variable report that task in while-loop is ready to be executed */
  osTicks++;
 67c:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <osTicks>
 680:	8f 5f       	subi	r24, 0xFF	; 255
 682:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <osTicks>
 686:	8f 91       	pop	r24
 688:	0f 90       	pop	r0
 68a:	0f be       	out	0x3f, r0	; 63
 68c:	0f 90       	pop	r0
 68e:	1f 90       	pop	r1
 690:	18 95       	reti

00000692 <_ZL20protocol_sendMessagehhhh>:
*  \return     E_NOT_OK - error
*  \return     E_OK - success
*  \pre        Module must be initialized
**********************************************************************************************************************/
static void protocol_sendMessage(uint8 transfer_0, uint8 transfer_1, uint8 transfer_2, uint8 transfer_3)
{
 692:	cf 93       	push	r28
 694:	df 93       	push	r29
 696:	00 d0       	rcall	.+0      	; 0x698 <_ZL20protocol_sendMessagehhhh+0x6>
 698:	00 d0       	rcall	.+0      	; 0x69a <_ZL20protocol_sendMessagehhhh+0x8>
 69a:	cd b7       	in	r28, 0x3d	; 61
 69c:	de b7       	in	r29, 0x3e	; 62
  uint8 TempChr[4] = {transfer_0, transfer_1, transfer_2, transfer_3};
 69e:	89 83       	std	Y+1, r24	; 0x01
 6a0:	6a 83       	std	Y+2, r22	; 0x02
 6a2:	4b 83       	std	Y+3, r20	; 0x03
 6a4:	2c 83       	std	Y+4, r18	; 0x04
  Serial.write(TempChr, 4);
 6a6:	e0 91 76 01 	lds	r30, 0x0176	; 0x800176 <__data_end>
 6aa:	f0 91 77 01 	lds	r31, 0x0177	; 0x800177 <__data_end+0x1>
 6ae:	02 80       	ldd	r0, Z+2	; 0x02
 6b0:	f3 81       	ldd	r31, Z+3	; 0x03
 6b2:	e0 2d       	mov	r30, r0
 6b4:	44 e0       	ldi	r20, 0x04	; 4
 6b6:	50 e0       	ldi	r21, 0x00	; 0
 6b8:	be 01       	movw	r22, r28
 6ba:	6f 5f       	subi	r22, 0xFF	; 255
 6bc:	7f 4f       	sbci	r23, 0xFF	; 255
 6be:	86 e7       	ldi	r24, 0x76	; 118
 6c0:	91 e0       	ldi	r25, 0x01	; 1
 6c2:	09 95       	icall
}
 6c4:	0f 90       	pop	r0
 6c6:	0f 90       	pop	r0
 6c8:	0f 90       	pop	r0
 6ca:	0f 90       	pop	r0
 6cc:	df 91       	pop	r29
 6ce:	cf 91       	pop	r28
 6d0:	08 95       	ret

000006d2 <protocol_Init>:
  *  \pre        protocol_InitMemory has been called unless protocol_ModuleInitialized is initialized by start-up code.
  *  \note       Specification of module initialization
  **********************************************************************************************************************/
  void protocol_Init(void)
  {
    rxMessage[0]=0x00;
 6d2:	e5 e1       	ldi	r30, 0x15	; 21
 6d4:	f2 e0       	ldi	r31, 0x02	; 2
 6d6:	10 82       	st	Z, r1
    rxMessage[1]=0x00;
 6d8:	11 82       	std	Z+1, r1	; 0x01
    rxMessage[2]=0x00;
 6da:	12 82       	std	Z+2, r1	; 0x02
    rxMessage[3]=0x00;
 6dc:	13 82       	std	Z+3, r1	; 0x03
 6de:	08 95       	ret

000006e0 <protocol_ComplexOp_wakeUpPattern>:
 *  \param[in]  aa       parameter to indicate the number of times the wakeup pattern to
 *                       be repeated
 *  \pre        Module must be initialized 
 **********************************************************************************************************************/
  void protocol_ComplexOp_wakeUpPattern(uint8 aa)
  {
 6e0:	cf 93       	push	r28
 6e2:	df 93       	push	r29
 6e4:	1f 92       	push	r1
 6e6:	cd b7       	in	r28, 0x3d	; 61
 6e8:	de b7       	in	r29, 0x3e	; 62
    volatile uint8 i = 0;
 6ea:	19 82       	std	Y+1, r1	; 0x01
    TXEN_int_LOW();
 6ec:	5c 98       	cbi	0x0b, 4	; 11
 6ee:	ef e8       	ldi	r30, 0x8F	; 143
 6f0:	f1 e0       	ldi	r31, 0x01	; 1
 6f2:	31 97       	sbiw	r30, 0x01	; 1
 6f4:	f1 f7       	brne	.-4      	; 0x6f2 <protocol_ComplexOp_wakeUpPattern+0x12>
 6f6:	00 c0       	rjmp	.+0      	; 0x6f8 <protocol_ComplexOp_wakeUpPattern+0x18>
 6f8:	00 00       	nop
    _delay_us(100); // wait until transceiver gets configured
    for ( ; i < aa; i++ )
 6fa:	99 81       	ldd	r25, Y+1	; 0x01
 6fc:	98 17       	cp	r25, r24
 6fe:	80 f4       	brcc	.+32     	; 0x720 <protocol_ComplexOp_wakeUpPattern+0x40>
    {
      TXD_int_LOW();
 700:	5e 98       	cbi	0x0b, 6	; 11
      TXEN_int_LOW();
 702:	5c 98       	cbi	0x0b, 4	; 11
 704:	f0 e2       	ldi	r31, 0x20	; 32
 706:	fa 95       	dec	r31
 708:	f1 f7       	brne	.-4      	; 0x706 <protocol_ComplexOp_wakeUpPattern+0x26>
      _delay_us(6);
      TXD_int_HIGH();
 70a:	5e 9a       	sbi	0x0b, 6	; 11
      TXEN_int_HIGH();
 70c:	5c 9a       	sbi	0x0b, 4	; 11
 70e:	90 e6       	ldi	r25, 0x60	; 96
 710:	9a 95       	dec	r25
 712:	f1 f7       	brne	.-4      	; 0x710 <protocol_ComplexOp_wakeUpPattern+0x30>
  void protocol_ComplexOp_wakeUpPattern(uint8 aa)
  {
    volatile uint8 i = 0;
    TXEN_int_LOW();
    _delay_us(100); // wait until transceiver gets configured
    for ( ; i < aa; i++ )
 714:	99 81       	ldd	r25, Y+1	; 0x01
 716:	9f 5f       	subi	r25, 0xFF	; 255
 718:	99 83       	std	Y+1, r25	; 0x01
 71a:	99 81       	ldd	r25, Y+1	; 0x01
 71c:	98 17       	cp	r25, r24
 71e:	80 f3       	brcs	.-32     	; 0x700 <protocol_ComplexOp_wakeUpPattern+0x20>
      _delay_us(6);
      TXD_int_HIGH();
      TXEN_int_HIGH();
      _delay_us(18);
    }
    TXEN_int_HIGH();
 720:	5c 9a       	sbi	0x0b, 4	; 11
  }
 722:	0f 90       	pop	r0
 724:	df 91       	pop	r29
 726:	cf 91       	pop	r28
 728:	08 95       	ret

0000072a <protocol_ComplexOp_lokalWakeUp>:
 *  \details    Arduino controls the WAKE pin of the transceiver to provoke a local wakeup pattern 
 *  \pre        Module must be initialized 
 **********************************************************************************************************************/
  void protocol_ComplexOp_lokalWakeUp()
  {
    CS2_OFF();
 72a:	44 98       	cbi	0x08, 4	; 8
 72c:	87 ec       	ldi	r24, 0xC7	; 199
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	01 97       	sbiw	r24, 0x01	; 1
 732:	f1 f7       	brne	.-4      	; 0x730 <protocol_ComplexOp_lokalWakeUp+0x6>
 734:	00 c0       	rjmp	.+0      	; 0x736 <protocol_ComplexOp_lokalWakeUp+0xc>
 736:	00 00       	nop
    _delay_us(50);
    CS2_ON();
 738:	44 9a       	sbi	0x08, 4	; 8
 73a:	08 95       	ret

0000073c <protocol_ComplexOp_forceBusCollition>:
 *  \pre        Module must be initialized 
 **********************************************************************************************************************/
  void protocol_ComplexOp_forceBusCollition()
  {
    uint8 i = 0;
    TXEN_int_LOW();
 73c:	5c 98       	cbi	0x0b, 4	; 11
    FR_TXEN_LOW();
 73e:	5d 98       	cbi	0x0b, 5	; 11
 740:	8f e8       	ldi	r24, 0x8F	; 143
 742:	91 e0       	ldi	r25, 0x01	; 1
 744:	01 97       	sbiw	r24, 0x01	; 1
 746:	f1 f7       	brne	.-4      	; 0x744 <protocol_ComplexOp_forceBusCollition+0x8>
 748:	00 c0       	rjmp	.+0      	; 0x74a <protocol_ComplexOp_forceBusCollition+0xe>
 74a:	00 00       	nop
 74c:	82 e0       	ldi	r24, 0x02	; 2
    _delay_us(100);
    for ( ; i < 2; i++ )
    {
      TXD_int_HIGH();
 74e:	5e 9a       	sbi	0x0b, 6	; 11
 750:	ef e8       	ldi	r30, 0x8F	; 143
 752:	f1 e0       	ldi	r31, 0x01	; 1
 754:	31 97       	sbiw	r30, 0x01	; 1
 756:	f1 f7       	brne	.-4      	; 0x754 <protocol_ComplexOp_forceBusCollition+0x18>
 758:	00 c0       	rjmp	.+0      	; 0x75a <protocol_ComplexOp_forceBusCollition+0x1e>
 75a:	00 00       	nop
      _delay_us(100);
      FR_TXD_HIGH();
 75c:	29 9a       	sbi	0x05, 1	; 5
 75e:	ef e8       	ldi	r30, 0x8F	; 143
 760:	f1 e0       	ldi	r31, 0x01	; 1
 762:	31 97       	sbiw	r30, 0x01	; 1
 764:	f1 f7       	brne	.-4      	; 0x762 <protocol_ComplexOp_forceBusCollition+0x26>
 766:	00 c0       	rjmp	.+0      	; 0x768 <protocol_ComplexOp_forceBusCollition+0x2c>
 768:	00 00       	nop
      _delay_us(100);
      TXD_int_LOW();
 76a:	5e 98       	cbi	0x0b, 6	; 11
 76c:	ef e8       	ldi	r30, 0x8F	; 143
 76e:	f1 e0       	ldi	r31, 0x01	; 1
 770:	31 97       	sbiw	r30, 0x01	; 1
 772:	f1 f7       	brne	.-4      	; 0x770 <protocol_ComplexOp_forceBusCollition+0x34>
 774:	00 c0       	rjmp	.+0      	; 0x776 <protocol_ComplexOp_forceBusCollition+0x3a>
 776:	00 00       	nop
      _delay_us(100);
      FR_TXD_LOW();
 778:	29 98       	cbi	0x05, 1	; 5
 77a:	ef e8       	ldi	r30, 0x8F	; 143
 77c:	f1 e0       	ldi	r31, 0x01	; 1
 77e:	31 97       	sbiw	r30, 0x01	; 1
 780:	f1 f7       	brne	.-4      	; 0x77e <protocol_ComplexOp_forceBusCollition+0x42>
 782:	00 c0       	rjmp	.+0      	; 0x784 <protocol_ComplexOp_forceBusCollition+0x48>
 784:	00 00       	nop
 786:	81 50       	subi	r24, 0x01	; 1
  {
    uint8 i = 0;
    TXEN_int_LOW();
    FR_TXEN_LOW();
    _delay_us(100);
    for ( ; i < 2; i++ )
 788:	11 f7       	brne	.-60     	; 0x74e <protocol_ComplexOp_forceBusCollition+0x12>
      TXD_int_LOW();
      _delay_us(100);
      FR_TXD_LOW();
      _delay_us(100);
    }
    TXEN_int_HIGH();
 78a:	5c 9a       	sbi	0x0b, 4	; 11
    FR_TXEN_HIGH();
 78c:	5d 9a       	sbi	0x0b, 5	; 11
 78e:	08 95       	ret

00000790 <protocol_ComplexOp_forceTxEntimeout>:
 *              flag in the transceiver status word is set
 *  \pre        Module must be initialized 
 **********************************************************************************************************************/
  void protocol_ComplexOp_forceTxEntimeout()
  {
    FR_TXEN_LOW();
 790:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 792:	2f ef       	ldi	r18, 0xFF	; 255
 794:	89 ef       	ldi	r24, 0xF9	; 249
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	21 50       	subi	r18, 0x01	; 1
 79a:	80 40       	sbci	r24, 0x00	; 0
 79c:	90 40       	sbci	r25, 0x00	; 0
 79e:	e1 f7       	brne	.-8      	; 0x798 <protocol_ComplexOp_forceTxEntimeout+0x8>
 7a0:	00 c0       	rjmp	.+0      	; 0x7a2 <protocol_ComplexOp_forceTxEntimeout+0x12>
 7a2:	00 00       	nop
    _delay_ms(20);
    FR_TXEN_HIGH();
 7a4:	5d 9a       	sbi	0x0b, 5	; 11
 7a6:	08 95       	ret

000007a8 <protocol_ComplexOp_ClampVbat>:
 *  \return     -
 *  \pre        Module must be initialized 
 **********************************************************************************************************************/
  void protocol_ComplexOp_ClampVbat(uint8 ed)
  {
    if (ed == 0)
 7a8:	81 11       	cpse	r24, r1
 7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <protocol_ComplexOp_ClampVbat+0x8>
    {
      VinVBat_LOW();
 7ac:	40 98       	cbi	0x08, 0	; 8
 7ae:	08 95       	ret
    } 
    else
    {
      VinVBat_HIGH();
 7b0:	40 9a       	sbi	0x08, 0	; 8
 7b2:	08 95       	ret

000007b4 <protocol_GetVersion>:
  *  \param[in]  -
  *  \pre        The module has not to be initialized.
  **********************************************************************************************************************/
  void protocol_GetVersion()
  {
    protocol_sendMessage(PROTOCOL_COMMAND_VERSION, SW_MAJOR_VERSION, SW_MINOR_VERSION, SW_PATCH_VERSION);
 7b4:	20 e0       	ldi	r18, 0x00	; 0
 7b6:	40 e0       	ldi	r20, 0x00	; 0
 7b8:	61 e0       	ldi	r22, 0x01	; 1
 7ba:	80 e0       	ldi	r24, 0x00	; 0
 7bc:	0e 94 49 03 	call	0x692	; 0x692 <_ZL20protocol_sendMessagehhhh>
 7c0:	08 95       	ret

000007c2 <protocol_Transceiverdevicemode>:
  *  \pre        The module has to be initialized.
  **********************************************************************************************************************/
  void protocol_Transceiverdevicemode()
  {
    /* ----- Local Variables ---------------------------------------------- */
    uint8 aa_local = rxMessage[1];
 7c2:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <_ZL9rxMessage+0x1>
    /* ----- Implementation ----------------------------------------------- */
    TrcvType = aa_local;
 7c6:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <_ZL8TrcvType>
    /* change the initial transceiver pin configuration to DIO-Mode */
    trcvDio_Init(TrcvType);
 7ca:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <trcvDio_Init>

    protocol_sendMessage(PROTOCOL_TRCV_DEVICE_MODE,PROTOCOL_CMD_OK,PROTOCOL_CMD_DONTCARE,PROTOCOL_CMD_DONTCARE);
 7ce:	20 e0       	ldi	r18, 0x00	; 0
 7d0:	40 e0       	ldi	r20, 0x00	; 0
 7d2:	61 e0       	ldi	r22, 0x01	; 1
 7d4:	80 e1       	ldi	r24, 0x10	; 16
 7d6:	0e 94 49 03 	call	0x692	; 0x692 <_ZL20protocol_sendMessagehhhh>
 7da:	08 95       	ret

000007dc <protocol_SetDIO>:
  *  \param[in]  -
  *  \pre        The module has to be initialized.
  **********************************************************************************************************************/
  void protocol_SetDIO()
  {
    uint8 nr_local = rxMessage[1];
 7dc:	e5 e1       	ldi	r30, 0x15	; 21
 7de:	f2 e0       	ldi	r31, 0x02	; 2
 7e0:	81 81       	ldd	r24, Z+1	; 0x01
    uint8 aa_local = rxMessage[3];
 7e2:	63 81       	ldd	r22, Z+3	; 0x03
    if(TrcvType != 0xFF)
 7e4:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <_ZL8TrcvType>
 7e8:	9f 3f       	cpi	r25, 0xFF	; 255
 7ea:	f1 f0       	breq	.+60     	; 0x828 <protocol_SetDIO+0x4c>
    {
      switch(nr_local)
 7ec:	81 11       	cpse	r24, r1
 7ee:	16 c0       	rjmp	.+44     	; 0x81c <protocol_SetDIO+0x40>
      {
        case pinMODE:
          disable();
 7f0:	f8 94       	cli
          switch(aa_local)
 7f2:	61 30       	cpi	r22, 0x01	; 1
 7f4:	49 f0       	breq	.+18     	; 0x808 <protocol_SetDIO+0x2c>
 7f6:	28 f0       	brcs	.+10     	; 0x802 <protocol_SetDIO+0x26>
 7f8:	62 30       	cpi	r22, 0x02	; 2
 7fa:	49 f0       	breq	.+18     	; 0x80e <protocol_SetDIO+0x32>
 7fc:	63 30       	cpi	r22, 0x03	; 3
 7fe:	51 f0       	breq	.+20     	; 0x814 <protocol_SetDIO+0x38>
 800:	0b c0       	rjmp	.+22     	; 0x818 <protocol_SetDIO+0x3c>
          {
            case 0: 
              EN_LOW();
 802:	2d 98       	cbi	0x05, 5	; 5
              STBN_LOW();
 804:	2b 98       	cbi	0x05, 3	; 5
              break;
 806:	08 c0       	rjmp	.+16     	; 0x818 <protocol_SetDIO+0x3c>
            case 1: 
              EN_LOW();
 808:	2d 98       	cbi	0x05, 5	; 5
              STBN_HIGH();
 80a:	2b 9a       	sbi	0x05, 3	; 5
              break;
 80c:	05 c0       	rjmp	.+10     	; 0x818 <protocol_SetDIO+0x3c>
            case 2: 
              EN_HIGH();
 80e:	2d 9a       	sbi	0x05, 5	; 5
              STBN_LOW();
 810:	2b 98       	cbi	0x05, 3	; 5
              break;
 812:	02 c0       	rjmp	.+4      	; 0x818 <protocol_SetDIO+0x3c>
            case 3: 
              EN_HIGH();
 814:	2d 9a       	sbi	0x05, 5	; 5
              STBN_HIGH();
 816:	2b 9a       	sbi	0x05, 3	; 5
              break;
          } 
          enable();
 818:	78 94       	sei
          break;
 81a:	02 c0       	rjmp	.+4      	; 0x820 <protocol_SetDIO+0x44>
        default:
          /* direct mapping */
          /* requested I/O pin rxMessage[1] equals dio pin description */
          dio_WriteChannel(nr_local, aa_local);
 81c:	0e 94 64 02 	call	0x4c8	; 0x4c8 <dio_WriteChannel>
          break;
      }
    }
    if (TrcvType == 0xFF)
 820:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <_ZL8TrcvType>
 824:	8f 3f       	cpi	r24, 0xFF	; 255
 826:	39 f4       	brne	.+14     	; 0x836 <protocol_SetDIO+0x5a>
    {
      protocol_sendMessage(PROTOCOL_SET_DIO, PROTOCOL_CMD_NOK, PROTOCOL_CMD_DONTCARE, PROTOCOL_CMD_DONTCARE);
 828:	20 e0       	ldi	r18, 0x00	; 0
 82a:	40 e0       	ldi	r20, 0x00	; 0
 82c:	60 e0       	ldi	r22, 0x00	; 0
 82e:	80 e2       	ldi	r24, 0x20	; 32
 830:	0e 94 49 03 	call	0x692	; 0x692 <_ZL20protocol_sendMessagehhhh>
 834:	08 95       	ret
    } 
    else
    {
      protocol_sendMessage(PROTOCOL_SET_DIO, PROTOCOL_CMD_OK, PROTOCOL_CMD_DONTCARE, PROTOCOL_CMD_DONTCARE);
 836:	20 e0       	ldi	r18, 0x00	; 0
 838:	40 e0       	ldi	r20, 0x00	; 0
 83a:	61 e0       	ldi	r22, 0x01	; 1
 83c:	80 e2       	ldi	r24, 0x20	; 32
 83e:	0e 94 49 03 	call	0x692	; 0x692 <_ZL20protocol_sendMessagehhhh>
 842:	08 95       	ret

00000844 <protocol_GetDIO>:
  *  \param[in]  -
  *  \pre        The module has to be initialized.
  **********************************************************************************************************************/
  void protocol_GetDIO()
  {
    uint8 nr_local = rxMessage[1];
 844:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <_ZL9rxMessage+0x1>
    uint8 aa_local;

    if (TrcvType == 0xFF)
 848:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <_ZL8TrcvType>
 84c:	9f 3f       	cpi	r25, 0xFF	; 255
 84e:	39 f4       	brne	.+14     	; 0x85e <protocol_GetDIO+0x1a>
    {
      protocol_sendMessage(PROTOCOL_GET_DIO, PROTOCOL_CMD_NOK, rxMessage[1], 0);
 850:	20 e0       	ldi	r18, 0x00	; 0
 852:	48 2f       	mov	r20, r24
 854:	60 e0       	ldi	r22, 0x00	; 0
 856:	81 e2       	ldi	r24, 0x21	; 33
 858:	0e 94 49 03 	call	0x692	; 0x692 <_ZL20protocol_sendMessagehhhh>
 85c:	08 95       	ret
    }
    else
    {
      aa_local = dio_ReadChannel(nr_local);
 85e:	0e 94 8d 02 	call	0x51a	; 0x51a <dio_ReadChannel>
      protocol_sendMessage(PROTOCOL_GET_DIO, PROTOCOL_CMD_OK, rxMessage[1], aa_local);
 862:	28 2f       	mov	r18, r24
 864:	40 91 16 02 	lds	r20, 0x0216	; 0x800216 <_ZL9rxMessage+0x1>
 868:	61 e0       	ldi	r22, 0x01	; 1
 86a:	81 e2       	ldi	r24, 0x21	; 33
 86c:	0e 94 49 03 	call	0x692	; 0x692 <_ZL20protocol_sendMessagehhhh>
 870:	08 95       	ret

00000872 <protocol_WriteReadTRCVStatusWord>:
  *  \pre        The module has to be initialized.
  **********************************************************************************************************************/
  void protocol_WriteReadTRCVStatusWord()
  {
    uint16 statusWord = 0;
    uint16 data_local = ((uint16)rxMessage[2] << 8) | rxMessage[3];
 872:	e5 e1       	ldi	r30, 0x15	; 21
 874:	f2 e0       	ldi	r31, 0x02	; 2
 876:	22 81       	ldd	r18, Z+2	; 0x02
 878:	83 81       	ldd	r24, Z+3	; 0x03
    uint8 aa_local = rxMessage[1];
 87a:	61 81       	ldd	r22, Z+1	; 0x01
    uint8 txMessage_local[4];
    txMessage_local[0] = PROTOCOL_TRCV_STATUS_WORD;
    if(TrcvType != 0xFF)
 87c:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <_ZL8TrcvType>
 880:	9f 3f       	cpi	r25, 0xFF	; 255
 882:	a1 f0       	breq	.+40     	; 0x8ac <protocol_WriteReadTRCVStatusWord+0x3a>
    {
      if(TrcvType == 0x00 || TrcvType == 0x01)
 884:	92 30       	cpi	r25, 0x02	; 2
 886:	20 f4       	brcc	.+8      	; 0x890 <protocol_WriteReadTRCVStatusWord+0x1e>
      {
        statusWord = trcvDio_ReadWord(0);
 888:	80 e0       	ldi	r24, 0x00	; 0
 88a:	0e 94 a7 02 	call	0x54e	; 0x54e <trcvDio_ReadWord>
 88e:	0a c0       	rjmp	.+20     	; 0x8a4 <protocol_WriteReadTRCVStatusWord+0x32>
      }
      else
      {
        if(TrcvType == 0x80 || TrcvType == 0x81)
 890:	90 58       	subi	r25, 0x80	; 128
 892:	92 30       	cpi	r25, 0x02	; 2
 894:	28 f4       	brcc	.+10     	; 0x8a0 <protocol_WriteReadTRCVStatusWord+0x2e>
  *  \pre        The module has to be initialized.
  **********************************************************************************************************************/
  void protocol_WriteReadTRCVStatusWord()
  {
    uint16 statusWord = 0;
    uint16 data_local = ((uint16)rxMessage[2] << 8) | rxMessage[3];
 896:	90 e0       	ldi	r25, 0x00	; 0
      }
      else
      {
        if(TrcvType == 0x80 || TrcvType == 0x81)
        {
          statusWord = trcvSpi_writeWord(data_local, aa_local);
 898:	92 2b       	or	r25, r18
 89a:	0e 94 e6 02 	call	0x5cc	; 0x5cc <trcvSpi_writeWord>
 89e:	02 c0       	rjmp	.+4      	; 0x8a4 <protocol_WriteReadTRCVStatusWord+0x32>
  *  \param[in]  -
  *  \pre        The module has to be initialized.
  **********************************************************************************************************************/
  void protocol_WriteReadTRCVStatusWord()
  {
    uint16 statusWord = 0;
 8a0:	80 e0       	ldi	r24, 0x00	; 0
 8a2:	90 e0       	ldi	r25, 0x00	; 0
        {
          statusWord = trcvSpi_writeWord(data_local, aa_local);
        }
      }
      txMessage_local[1] = PROTOCOL_CMD_OK;
      txMessage_local[2] = (uint8)(statusWord >> 8);
 8a4:	49 2f       	mov	r20, r25
      txMessage_local[3] = (uint8)(statusWord & 0xff);
 8a6:	28 2f       	mov	r18, r24
        if(TrcvType == 0x80 || TrcvType == 0x81)
        {
          statusWord = trcvSpi_writeWord(data_local, aa_local);
        }
      }
      txMessage_local[1] = PROTOCOL_CMD_OK;
 8a8:	61 e0       	ldi	r22, 0x01	; 1
 8aa:	03 c0       	rjmp	.+6      	; 0x8b2 <protocol_WriteReadTRCVStatusWord+0x40>
    }
    else
    {
      txMessage_local[1] = PROTOCOL_CMD_NOK;
      txMessage_local[2] = PROTOCOL_CMD_DONTCARE;
      txMessage_local[3] = PROTOCOL_CMD_DONTCARE;
 8ac:	20 e0       	ldi	r18, 0x00	; 0
      txMessage_local[3] = (uint8)(statusWord & 0xff);
    }
    else
    {
      txMessage_local[1] = PROTOCOL_CMD_NOK;
      txMessage_local[2] = PROTOCOL_CMD_DONTCARE;
 8ae:	40 e0       	ldi	r20, 0x00	; 0
      txMessage_local[2] = (uint8)(statusWord >> 8);
      txMessage_local[3] = (uint8)(statusWord & 0xff);
    }
    else
    {
      txMessage_local[1] = PROTOCOL_CMD_NOK;
 8b0:	60 e0       	ldi	r22, 0x00	; 0
      txMessage_local[2] = PROTOCOL_CMD_DONTCARE;
      txMessage_local[3] = PROTOCOL_CMD_DONTCARE;
    }
    protocol_sendMessage(txMessage_local[0], txMessage_local[1], txMessage_local[2], txMessage_local[3]);
 8b2:	80 e3       	ldi	r24, 0x30	; 48
 8b4:	0e 94 49 03 	call	0x692	; 0x692 <_ZL20protocol_sendMessagehhhh>
 8b8:	08 95       	ret

000008ba <protocol_ResetAllDioPins>:
  *  \param[in]  -
  *  \pre        The module has to be initialized.
  **********************************************************************************************************************/
  void protocol_ResetAllDioPins()
  {
    protocol_sendMessage(PROTOCOL_RESETALLDIOPINS, PROTOCOL_CMD_OK, PROTOCOL_CMD_DONTCARE, PROTOCOL_CMD_DONTCARE);
 8ba:	20 e0       	ldi	r18, 0x00	; 0
 8bc:	40 e0       	ldi	r20, 0x00	; 0
 8be:	61 e0       	ldi	r22, 0x01	; 1
 8c0:	80 e6       	ldi	r24, 0x60	; 96
 8c2:	0e 94 49 03 	call	0x692	; 0x692 <_ZL20protocol_sendMessagehhhh>
    dio_ResetPins();
 8c6:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <dio_ResetPins>
 8ca:	08 95       	ret

000008cc <protocol_Dispatcher>:
  *  \note
  **********************************************************************************************************************/
  void protocol_Dispatcher()
  {
    /* decode received frame */
    switch(rxMessage[0])
 8cc:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <_ZL9rxMessage>
 8d0:	81 32       	cpi	r24, 0x21	; 33
 8d2:	c1 f0       	breq	.+48     	; 0x904 <__stack+0x5>
 8d4:	38 f4       	brcc	.+14     	; 0x8e4 <protocol_Dispatcher+0x18>
 8d6:	80 31       	cpi	r24, 0x10	; 16
 8d8:	79 f0       	breq	.+30     	; 0x8f8 <protocol_Dispatcher+0x2c>
 8da:	80 32       	cpi	r24, 0x20	; 32
 8dc:	81 f0       	breq	.+32     	; 0x8fe <protocol_Dispatcher+0x32>
 8de:	81 11       	cpse	r24, r1
 8e0:	44 c0       	rjmp	.+136    	; 0x96a <__stack+0x6b>
 8e2:	07 c0       	rjmp	.+14     	; 0x8f2 <protocol_Dispatcher+0x26>
 8e4:	80 34       	cpi	r24, 0x40	; 64
 8e6:	a1 f0       	breq	.+40     	; 0x910 <__stack+0x11>
 8e8:	80 36       	cpi	r24, 0x60	; 96
 8ea:	e9 f1       	breq	.+122    	; 0x966 <__stack+0x67>
 8ec:	80 33       	cpi	r24, 0x30	; 48
 8ee:	e9 f5       	brne	.+122    	; 0x96a <__stack+0x6b>
 8f0:	0c c0       	rjmp	.+24     	; 0x90a <__stack+0xb>
    {
      case PROTOCOL_COMMAND_VERSION :
        protocol_GetVersion();
 8f2:	0e 94 da 03 	call	0x7b4	; 0x7b4 <protocol_GetVersion>
      break;
 8f6:	08 95       	ret

      case PROTOCOL_TRCV_DEVICE_MODE :
        protocol_Transceiverdevicemode();
 8f8:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <protocol_Transceiverdevicemode>
      break;
 8fc:	08 95       	ret

      case PROTOCOL_SET_DIO :      
        protocol_SetDIO();
 8fe:	0e 94 ee 03 	call	0x7dc	; 0x7dc <protocol_SetDIO>
      break;
 902:	08 95       	ret

      case PROTOCOL_GET_DIO :
        protocol_GetDIO();
 904:	0e 94 22 04 	call	0x844	; 0x844 <protocol_GetDIO>
      break;
 908:	08 95       	ret

      case PROTOCOL_TRCV_STATUS_WORD :
        protocol_WriteReadTRCVStatusWord();
 90a:	0e 94 39 04 	call	0x872	; 0x872 <protocol_WriteReadTRCVStatusWord>
      break;
 90e:	08 95       	ret
*  \pre        Module must be initialized
**********************************************************************************************************************/
static void protocol_ComplexOp()
{
  uint8 nr_local = rxMessage[1];
  uint8 ed_local = rxMessage[2];
 910:	e5 e1       	ldi	r30, 0x15	; 21
 912:	f2 e0       	ldi	r31, 0x02	; 2
 914:	22 81       	ldd	r18, Z+2	; 0x02
  uint8 aa_local = rxMessage[3];
 916:	83 81       	ldd	r24, Z+3	; 0x03

  switch(nr_local)
 918:	91 81       	ldd	r25, Z+1	; 0x01
 91a:	93 34       	cpi	r25, 0x43	; 67
 91c:	59 f0       	breq	.+22     	; 0x934 <__stack+0x35>
 91e:	28 f4       	brcc	.+10     	; 0x92a <__stack+0x2b>
 920:	91 34       	cpi	r25, 0x41	; 65
 922:	91 f0       	breq	.+36     	; 0x948 <__stack+0x49>
 924:	92 34       	cpi	r25, 0x42	; 66
 926:	49 f0       	breq	.+18     	; 0x93a <__stack+0x3b>
 928:	15 c0       	rjmp	.+42     	; 0x954 <__stack+0x55>
 92a:	94 34       	cpi	r25, 0x44	; 68
 92c:	49 f0       	breq	.+18     	; 0x940 <__stack+0x41>
 92e:	95 34       	cpi	r25, 0x45	; 69
 930:	71 f0       	breq	.+28     	; 0x94e <__stack+0x4f>
 932:	10 c0       	rjmp	.+32     	; 0x954 <__stack+0x55>
  {
    case PROTOCOL_COMPLEXOP_FORCETXTNTO:
      protocol_ComplexOp_forceTxEntimeout();
 934:	0e 94 c8 03 	call	0x790	; 0x790 <protocol_ComplexOp_forceTxEntimeout>
 938:	0f c0       	rjmp	.+30     	; 0x958 <__stack+0x59>
    break;

    case PROTOCOL_COMPLEXOP_FORCECOL:
      protocol_ComplexOp_forceBusCollition();
 93a:	0e 94 9e 03 	call	0x73c	; 0x73c <protocol_ComplexOp_forceBusCollition>
 93e:	0c c0       	rjmp	.+24     	; 0x958 <__stack+0x59>
    break;

    case PROTOCOL_COMPLEXOP_VBATDIS:
      protocol_ComplexOp_ClampVbat(ed_local);
 940:	82 2f       	mov	r24, r18
 942:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <protocol_ComplexOp_ClampVbat>
 946:	08 c0       	rjmp	.+16     	; 0x958 <__stack+0x59>
    break;

    case PROTOCOL_COMPLEXOP_REMOTEWU:
      protocol_ComplexOp_wakeUpPattern(aa_local);
 948:	0e 94 70 03 	call	0x6e0	; 0x6e0 <protocol_ComplexOp_wakeUpPattern>
 94c:	05 c0       	rjmp	.+10     	; 0x958 <__stack+0x59>
    break;

    case PROTOCOL_COMPLEXOP_LOCALWU:
      protocol_ComplexOp_lokalWakeUp();
 94e:	0e 94 95 03 	call	0x72a	; 0x72a <protocol_ComplexOp_lokalWakeUp>
 952:	02 c0       	rjmp	.+4      	; 0x958 <__stack+0x59>
    break;

    default:
    CLAMP_GND_BP_HIGH();
 954:	41 9a       	sbi	0x08, 1	; 8
    CLAMP_GND_BM_HIGH();
 956:	42 9a       	sbi	0x08, 2	; 8
    break;
  }
  protocol_sendMessage(PROTOCOL_COMPLEXOP, PROTOCOL_CMD_OK, PROTOCOL_CMD_DONTCARE, PROTOCOL_CMD_DONTCARE);
 958:	20 e0       	ldi	r18, 0x00	; 0
 95a:	40 e0       	ldi	r20, 0x00	; 0
 95c:	61 e0       	ldi	r22, 0x01	; 1
 95e:	80 e4       	ldi	r24, 0x40	; 64
 960:	0e 94 49 03 	call	0x692	; 0x692 <_ZL20protocol_sendMessagehhhh>
 964:	08 95       	ret
      case PROTOCOL_COMPLEXOP :
        protocol_ComplexOp();
      break;

      case PROTOCOL_RESETALLDIOPINS:
        protocol_ResetAllDioPins();
 966:	0e 94 5d 04 	call	0x8ba	; 0x8ba <protocol_ResetAllDioPins>
 96a:	08 95       	ret

0000096c <protocol_Handler>:
  *  \pre        The module has to be initialized.
  *  \note
  **********************************************************************************************************************/
  /* receive a single frame */
  void protocol_Handler()
  {
 96c:	cf 93       	push	r28
 96e:	df 93       	push	r29
    static uint8 serialFlush;

    if( Serial.available() >= 4 )
 970:	86 e7       	ldi	r24, 0x76	; 118
 972:	91 e0       	ldi	r25, 0x01	; 1
 974:	0e 94 5f 00 	call	0xbe	; 0xbe <_ZN14HardwareSerial9availableEv>
 978:	04 97       	sbiw	r24, 0x04	; 4
 97a:	cc f0       	brlt	.+50     	; 0x9ae <protocol_Handler+0x42>
    {
      /* Read a received frame */
      rxMessage[0] = Serial.read();
 97c:	86 e7       	ldi	r24, 0x76	; 118
 97e:	91 e0       	ldi	r25, 0x01	; 1
 980:	0e 94 79 00 	call	0xf2	; 0xf2 <_ZN14HardwareSerial4readEv>
 984:	c5 e1       	ldi	r28, 0x15	; 21
 986:	d2 e0       	ldi	r29, 0x02	; 2
 988:	88 83       	st	Y, r24
      rxMessage[1] = Serial.read();
 98a:	86 e7       	ldi	r24, 0x76	; 118
 98c:	91 e0       	ldi	r25, 0x01	; 1
 98e:	0e 94 79 00 	call	0xf2	; 0xf2 <_ZN14HardwareSerial4readEv>
 992:	89 83       	std	Y+1, r24	; 0x01
      rxMessage[2] = Serial.read();
 994:	86 e7       	ldi	r24, 0x76	; 118
 996:	91 e0       	ldi	r25, 0x01	; 1
 998:	0e 94 79 00 	call	0xf2	; 0xf2 <_ZN14HardwareSerial4readEv>
 99c:	8a 83       	std	Y+2, r24	; 0x02
      rxMessage[3] = Serial.read();
 99e:	86 e7       	ldi	r24, 0x76	; 118
 9a0:	91 e0       	ldi	r25, 0x01	; 1
 9a2:	0e 94 79 00 	call	0xf2	; 0xf2 <_ZN14HardwareSerial4readEv>
 9a6:	8b 83       	std	Y+3, r24	; 0x03
      /* Decode protocol */
      protocol_Dispatcher();
 9a8:	0e 94 66 04 	call	0x8cc	; 0x8cc <protocol_Dispatcher>
 9ac:	10 c0       	rjmp	.+32     	; 0x9ce <protocol_Handler+0x62>
    }
    else
    {
      /* timeout counter handling */
      if( Serial.available() > 0 )
 9ae:	86 e7       	ldi	r24, 0x76	; 118
 9b0:	91 e0       	ldi	r25, 0x01	; 1
 9b2:	0e 94 5f 00 	call	0xbe	; 0xbe <_ZN14HardwareSerial9availableEv>
 9b6:	18 16       	cp	r1, r24
 9b8:	19 06       	cpc	r1, r25
 9ba:	34 f4       	brge	.+12     	; 0x9c8 <protocol_Handler+0x5c>
      {
        serialFlush++;
 9bc:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <_ZZ16protocol_HandlerE11serialFlush>
 9c0:	8f 5f       	subi	r24, 0xFF	; 255
 9c2:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <_ZZ16protocol_HandlerE11serialFlush>
 9c6:	03 c0       	rjmp	.+6      	; 0x9ce <protocol_Handler+0x62>
      } 
      else
      {
        serialFlush = 0;
 9c8:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <_ZZ16protocol_HandlerE11serialFlush>
 9cc:	12 c0       	rjmp	.+36     	; 0x9f2 <protocol_Handler+0x86>
      }
    }

    /* if timeout happened, reset receive buffer */
    if( serialFlush >= PROTOCOL_TIMEOUT )
 9ce:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <_ZZ16protocol_HandlerE11serialFlush>
 9d2:	80 32       	cpi	r24, 0x20	; 32
 9d4:	28 f4       	brcc	.+10     	; 0x9e0 <protocol_Handler+0x74>
 9d6:	0d c0       	rjmp	.+26     	; 0x9f2 <protocol_Handler+0x86>
    {
      while(Serial.available() > 0)
      { /* purge receive buffer */
        (void)Serial.read();
 9d8:	86 e7       	ldi	r24, 0x76	; 118
 9da:	91 e0       	ldi	r25, 0x01	; 1
 9dc:	0e 94 79 00 	call	0xf2	; 0xf2 <_ZN14HardwareSerial4readEv>
    }

    /* if timeout happened, reset receive buffer */
    if( serialFlush >= PROTOCOL_TIMEOUT )
    {
      while(Serial.available() > 0)
 9e0:	86 e7       	ldi	r24, 0x76	; 118
 9e2:	91 e0       	ldi	r25, 0x01	; 1
 9e4:	0e 94 5f 00 	call	0xbe	; 0xbe <_ZN14HardwareSerial9availableEv>
 9e8:	18 16       	cp	r1, r24
 9ea:	19 06       	cpc	r1, r25
 9ec:	ac f3       	brlt	.-22     	; 0x9d8 <protocol_Handler+0x6c>
      { /* purge receive buffer */
        (void)Serial.read();
      }
      serialFlush = 0;
 9ee:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <_ZZ16protocol_HandlerE11serialFlush>
    }
  }
 9f2:	df 91       	pop	r29
 9f4:	cf 91       	pop	r28
 9f6:	08 95       	ret

000009f8 <__udivmodsi4>:
 9f8:	a1 e2       	ldi	r26, 0x21	; 33
 9fa:	1a 2e       	mov	r1, r26
 9fc:	aa 1b       	sub	r26, r26
 9fe:	bb 1b       	sub	r27, r27
 a00:	fd 01       	movw	r30, r26
 a02:	0d c0       	rjmp	.+26     	; 0xa1e <__udivmodsi4_ep>

00000a04 <__udivmodsi4_loop>:
 a04:	aa 1f       	adc	r26, r26
 a06:	bb 1f       	adc	r27, r27
 a08:	ee 1f       	adc	r30, r30
 a0a:	ff 1f       	adc	r31, r31
 a0c:	a2 17       	cp	r26, r18
 a0e:	b3 07       	cpc	r27, r19
 a10:	e4 07       	cpc	r30, r20
 a12:	f5 07       	cpc	r31, r21
 a14:	20 f0       	brcs	.+8      	; 0xa1e <__udivmodsi4_ep>
 a16:	a2 1b       	sub	r26, r18
 a18:	b3 0b       	sbc	r27, r19
 a1a:	e4 0b       	sbc	r30, r20
 a1c:	f5 0b       	sbc	r31, r21

00000a1e <__udivmodsi4_ep>:
 a1e:	66 1f       	adc	r22, r22
 a20:	77 1f       	adc	r23, r23
 a22:	88 1f       	adc	r24, r24
 a24:	99 1f       	adc	r25, r25
 a26:	1a 94       	dec	r1
 a28:	69 f7       	brne	.-38     	; 0xa04 <__udivmodsi4_loop>
 a2a:	60 95       	com	r22
 a2c:	70 95       	com	r23
 a2e:	80 95       	com	r24
 a30:	90 95       	com	r25
 a32:	9b 01       	movw	r18, r22
 a34:	ac 01       	movw	r20, r24
 a36:	bd 01       	movw	r22, r26
 a38:	cf 01       	movw	r24, r30
 a3a:	08 95       	ret

00000a3c <__tablejump2__>:
 a3c:	ee 0f       	add	r30, r30
 a3e:	ff 1f       	adc	r31, r31
 a40:	05 90       	lpm	r0, Z+
 a42:	f4 91       	lpm	r31, Z
 a44:	e0 2d       	mov	r30, r0
 a46:	09 94       	ijmp

00000a48 <_exit>:
 a48:	f8 94       	cli

00000a4a <__stop_program>:
 a4a:	ff cf       	rjmp	.-2      	; 0xa4a <__stop_program>
