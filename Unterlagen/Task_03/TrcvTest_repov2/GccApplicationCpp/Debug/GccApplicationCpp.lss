
GccApplicationCpp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00800100  00000b38  00000bcc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ac  00800176  00800176  00000c42  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c42  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000328  00000000  00000000  00000cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006b78  00000000  00000000  00000fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001393  00000000  00000000  00007b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a24  00000000  00000000  00008ee7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000864  00000000  00000000  0000a90c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000019d2  00000000  00000000  0000b170  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002ace  00000000  00000000  0000cb42  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a0  00000000  00000000  0000f610  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__vector_16>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 91 01 	jmp	0x322	; 0x322 <__vector_18>
  4c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__vector_19>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	ef 01       	movw	r28, r30

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	e8 e3       	ldi	r30, 0x38	; 56
  7e:	fb e0       	ldi	r31, 0x0B	; 11
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	a6 37       	cpi	r26, 0x76	; 118
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	22 e0       	ldi	r18, 0x02	; 2
  8e:	a6 e7       	ldi	r26, 0x76	; 118
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	a2 32       	cpi	r26, 0x22	; 34
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 94 05 	call	0xb28	; 0xb28 <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 9e 03 	call	0x73c	; 0x73c <main>
  b6:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <_ZN14HardwareSerial9availableEv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
  be:	fc 01       	movw	r30, r24
  c0:	91 8d       	ldd	r25, Z+25	; 0x19
  c2:	22 8d       	ldd	r18, Z+26	; 0x1a
  c4:	89 2f       	mov	r24, r25
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	80 5c       	subi	r24, 0xC0	; 192
  ca:	9f 4f       	sbci	r25, 0xFF	; 255
  cc:	82 1b       	sub	r24, r18
  ce:	91 09       	sbc	r25, r1
  d0:	8f 73       	andi	r24, 0x3F	; 63
  d2:	99 27       	eor	r25, r25
  d4:	08 95       	ret

000000d6 <_ZN14HardwareSerial4peekEv>:
  d6:	fc 01       	movw	r30, r24
  d8:	91 8d       	ldd	r25, Z+25	; 0x19
  da:	82 8d       	ldd	r24, Z+26	; 0x1a
  dc:	98 17       	cp	r25, r24
  de:	31 f0       	breq	.+12     	; 0xec <_ZN14HardwareSerial4peekEv+0x16>
  e0:	82 8d       	ldd	r24, Z+26	; 0x1a
  e2:	e8 0f       	add	r30, r24
  e4:	f1 1d       	adc	r31, r1
  e6:	85 8d       	ldd	r24, Z+29	; 0x1d
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	08 95       	ret
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	9f ef       	ldi	r25, 0xFF	; 255
  f0:	08 95       	ret

000000f2 <_ZN14HardwareSerial4readEv>:
  f2:	fc 01       	movw	r30, r24
  f4:	91 8d       	ldd	r25, Z+25	; 0x19
  f6:	82 8d       	ldd	r24, Z+26	; 0x1a
  f8:	98 17       	cp	r25, r24
  fa:	61 f0       	breq	.+24     	; 0x114 <_ZN14HardwareSerial4readEv+0x22>
  fc:	82 8d       	ldd	r24, Z+26	; 0x1a
  fe:	df 01       	movw	r26, r30
 100:	a8 0f       	add	r26, r24
 102:	b1 1d       	adc	r27, r1
 104:	5d 96       	adiw	r26, 0x1d	; 29
 106:	8c 91       	ld	r24, X
 108:	92 8d       	ldd	r25, Z+26	; 0x1a
 10a:	9f 5f       	subi	r25, 0xFF	; 255
 10c:	9f 73       	andi	r25, 0x3F	; 63
 10e:	92 8f       	std	Z+26, r25	; 0x1a
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	08 95       	ret
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	9f ef       	ldi	r25, 0xFF	; 255
 118:	08 95       	ret

0000011a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 11a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 11c:	84 8d       	ldd	r24, Z+28	; 0x1c
 11e:	df 01       	movw	r26, r30
 120:	a8 0f       	add	r26, r24
 122:	b1 1d       	adc	r27, r1
 124:	a3 5a       	subi	r26, 0xA3	; 163
 126:	bf 4f       	sbci	r27, 0xFF	; 255
 128:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 12a:	24 8d       	ldd	r18, Z+28	; 0x1c
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	2f 5f       	subi	r18, 0xFF	; 255
 130:	3f 4f       	sbci	r19, 0xFF	; 255
 132:	2f 73       	andi	r18, 0x3F	; 63
 134:	30 78       	andi	r19, 0x80	; 128
 136:	33 23       	and	r19, r19
 138:	34 f4       	brge	.+12     	; 0x146 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	31 09       	sbc	r19, r1
 13e:	20 6c       	ori	r18, 0xC0	; 192
 140:	3f 6f       	ori	r19, 0xFF	; 255
 142:	2f 5f       	subi	r18, 0xFF	; 255
 144:	3f 4f       	sbci	r19, 0xFF	; 255
 146:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
 148:	a6 89       	ldd	r26, Z+22	; 0x16
 14a:	b7 89       	ldd	r27, Z+23	; 0x17
 14c:	8c 93       	st	X, r24

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 14e:	a0 89       	ldd	r26, Z+16	; 0x10
 150:	b1 89       	ldd	r27, Z+17	; 0x11
 152:	8c 91       	ld	r24, X
 154:	80 64       	ori	r24, 0x40	; 64
 156:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 158:	93 8d       	ldd	r25, Z+27	; 0x1b
 15a:	84 8d       	ldd	r24, Z+28	; 0x1c
 15c:	98 13       	cpse	r25, r24
 15e:	06 c0       	rjmp	.+12     	; 0x16c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x52>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 160:	02 88       	ldd	r0, Z+18	; 0x12
 162:	f3 89       	ldd	r31, Z+19	; 0x13
 164:	e0 2d       	mov	r30, r0
 166:	80 81       	ld	r24, Z
 168:	8f 7d       	andi	r24, 0xDF	; 223
 16a:	80 83       	st	Z, r24
 16c:	08 95       	ret

0000016e <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 174:	88 8d       	ldd	r24, Y+24	; 0x18
 176:	81 11       	cpse	r24, r1
 178:	0f c0       	rjmp	.+30     	; 0x198 <_ZN14HardwareSerial5flushEv+0x2a>
 17a:	18 c0       	rjmp	.+48     	; 0x1ac <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	07 fc       	sbrc	r0, 7
 180:	0d c0       	rjmp	.+26     	; 0x19c <_ZN14HardwareSerial5flushEv+0x2e>
 182:	90 81       	ld	r25, Z
 184:	95 ff       	sbrs	r25, 5
 186:	0a c0       	rjmp	.+20     	; 0x19c <_ZN14HardwareSerial5flushEv+0x2e>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 188:	a8 89       	ldd	r26, Y+16	; 0x10
 18a:	b9 89       	ldd	r27, Y+17	; 0x11
 18c:	8c 91       	ld	r24, X
 18e:	85 ff       	sbrs	r24, 5
 190:	05 c0       	rjmp	.+10     	; 0x19c <_ZN14HardwareSerial5flushEv+0x2e>
	  _tx_udr_empty_irq();
 192:	ce 01       	movw	r24, r28
 194:	0e 94 8d 00 	call	0x11a	; 0x11a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 198:	ea 89       	ldd	r30, Y+18	; 0x12
 19a:	fb 89       	ldd	r31, Y+19	; 0x13
 19c:	90 81       	ld	r25, Z
 19e:	95 fd       	sbrc	r25, 5
 1a0:	ed cf       	rjmp	.-38     	; 0x17c <_ZN14HardwareSerial5flushEv+0xe>
 1a2:	a8 89       	ldd	r26, Y+16	; 0x10
 1a4:	b9 89       	ldd	r27, Y+17	; 0x11
 1a6:	8c 91       	ld	r24, X
 1a8:	86 ff       	sbrs	r24, 6
 1aa:	e8 cf       	rjmp	.-48     	; 0x17c <_ZN14HardwareSerial5flushEv+0xe>
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
 1b2:	0f 93       	push	r16
 1b4:	1f 93       	push	r17
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	fc 01       	movw	r30, r24
  _written = true;
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	80 8f       	std	Z+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 1c0:	93 8d       	ldd	r25, Z+27	; 0x1b
 1c2:	84 8d       	ldd	r24, Z+28	; 0x1c
 1c4:	98 13       	cpse	r25, r24
 1c6:	22 c0       	rjmp	.+68     	; 0x20c <_ZN14HardwareSerial5writeEh+0x5a>
 1c8:	a0 89       	ldd	r26, Z+16	; 0x10
 1ca:	b1 89       	ldd	r27, Z+17	; 0x11
 1cc:	8c 91       	ld	r24, X
 1ce:	85 fd       	sbrc	r24, 5
 1d0:	2f c0       	rjmp	.+94     	; 0x230 <_ZN14HardwareSerial5writeEh+0x7e>
 1d2:	1c c0       	rjmp	.+56     	; 0x20c <_ZN14HardwareSerial5writeEh+0x5a>
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    if (bit_is_clear(SREG, SREG_I)) {
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	07 fc       	sbrc	r0, 7
 1d8:	08 c0       	rjmp	.+16     	; 0x1ea <_ZN14HardwareSerial5writeEh+0x38>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 1da:	e8 89       	ldd	r30, Y+16	; 0x10
 1dc:	f9 89       	ldd	r31, Y+17	; 0x11
 1de:	80 81       	ld	r24, Z
 1e0:	85 ff       	sbrs	r24, 5
 1e2:	03 c0       	rjmp	.+6      	; 0x1ea <_ZN14HardwareSerial5writeEh+0x38>
	_tx_udr_empty_irq();
 1e4:	ce 01       	movw	r24, r28
 1e6:	0e 94 8d 00 	call	0x11a	; 0x11a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 1ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
 1ec:	09 17       	cp	r16, r25
 1ee:	91 f3       	breq	.-28     	; 0x1d4 <_ZN14HardwareSerial5writeEh+0x22>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 1f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
 1f2:	fe 01       	movw	r30, r28
 1f4:	e8 0f       	add	r30, r24
 1f6:	f1 1d       	adc	r31, r1
 1f8:	e3 5a       	subi	r30, 0xA3	; 163
 1fa:	ff 4f       	sbci	r31, 0xFF	; 255
 1fc:	10 83       	st	Z, r17
  _tx_buffer_head = i;
 1fe:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 200:	ea 89       	ldd	r30, Y+18	; 0x12
 202:	fb 89       	ldd	r31, Y+19	; 0x13
 204:	80 81       	ld	r24, Z
 206:	80 62       	ori	r24, 0x20	; 32
 208:	80 83       	st	Z, r24
  
  return 1;
 20a:	1b c0       	rjmp	.+54     	; 0x242 <_ZN14HardwareSerial5writeEh+0x90>
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 20c:	23 8d       	ldd	r18, Z+27	; 0x1b
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	2f 5f       	subi	r18, 0xFF	; 255
 212:	3f 4f       	sbci	r19, 0xFF	; 255
 214:	2f 73       	andi	r18, 0x3F	; 63
 216:	30 78       	andi	r19, 0x80	; 128
 218:	33 23       	and	r19, r19
 21a:	34 f4       	brge	.+12     	; 0x228 <_ZN14HardwareSerial5writeEh+0x76>
 21c:	21 50       	subi	r18, 0x01	; 1
 21e:	31 09       	sbc	r19, r1
 220:	20 6c       	ori	r18, 0xC0	; 192
 222:	3f 6f       	ori	r19, 0xFF	; 255
 224:	2f 5f       	subi	r18, 0xFF	; 255
 226:	3f 4f       	sbci	r19, 0xFF	; 255
 228:	16 2f       	mov	r17, r22
 22a:	ef 01       	movw	r28, r30
 22c:	02 2f       	mov	r16, r18
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 22e:	dd cf       	rjmp	.-70     	; 0x1ea <_ZN14HardwareSerial5writeEh+0x38>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 230:	a6 89       	ldd	r26, Z+22	; 0x16
 232:	b7 89       	ldd	r27, Z+23	; 0x17
 234:	6c 93       	st	X, r22
    sbi(*_ucsra, TXC0);
 236:	00 88       	ldd	r0, Z+16	; 0x10
 238:	f1 89       	ldd	r31, Z+17	; 0x11
 23a:	e0 2d       	mov	r30, r0
 23c:	80 81       	ld	r24, Z
 23e:	80 64       	ori	r24, 0x40	; 64
 240:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	1f 91       	pop	r17
 24c:	0f 91       	pop	r16
 24e:	08 95       	ret

00000250 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 250:	bf 92       	push	r11
 252:	cf 92       	push	r12
 254:	df 92       	push	r13
 256:	ef 92       	push	r14
 258:	ff 92       	push	r15
 25a:	0f 93       	push	r16
 25c:	1f 93       	push	r17
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	ec 01       	movw	r28, r24
 264:	6a 01       	movw	r12, r20
 266:	7b 01       	movw	r14, r22
 268:	b2 2e       	mov	r11, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 26a:	e8 89       	ldd	r30, Y+16	; 0x10
 26c:	f9 89       	ldd	r31, Y+17	; 0x11
 26e:	82 e0       	ldi	r24, 0x02	; 2
 270:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 272:	41 15       	cp	r20, r1
 274:	51 4e       	sbci	r21, 0xE1	; 225
 276:	61 05       	cpc	r22, r1
 278:	71 05       	cpc	r23, r1
 27a:	b1 f0       	breq	.+44     	; 0x2a8 <_ZN14HardwareSerial5beginEmh+0x58>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 27c:	60 e0       	ldi	r22, 0x00	; 0
 27e:	79 e0       	ldi	r23, 0x09	; 9
 280:	8d e3       	ldi	r24, 0x3D	; 61
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	a7 01       	movw	r20, r14
 286:	96 01       	movw	r18, r12
 288:	0e 94 72 05 	call	0xae4	; 0xae4 <__udivmodsi4>
 28c:	89 01       	movw	r16, r18
 28e:	9a 01       	movw	r18, r20
 290:	01 50       	subi	r16, 0x01	; 1
 292:	11 09       	sbc	r17, r1
 294:	21 09       	sbc	r18, r1
 296:	31 09       	sbc	r19, r1
 298:	36 95       	lsr	r19
 29a:	27 95       	ror	r18
 29c:	17 95       	ror	r17
 29e:	07 95       	ror	r16
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 2a0:	01 15       	cp	r16, r1
 2a2:	80 e1       	ldi	r24, 0x10	; 16
 2a4:	18 07       	cpc	r17, r24
 2a6:	a8 f0       	brcs	.+42     	; 0x2d2 <_ZN14HardwareSerial5beginEmh+0x82>
  {
    *_ucsra = 0;
 2a8:	e8 89       	ldd	r30, Y+16	; 0x10
 2aa:	f9 89       	ldd	r31, Y+17	; 0x11
 2ac:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 2ae:	60 e8       	ldi	r22, 0x80	; 128
 2b0:	74 e8       	ldi	r23, 0x84	; 132
 2b2:	8e e1       	ldi	r24, 0x1E	; 30
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	a7 01       	movw	r20, r14
 2b8:	96 01       	movw	r18, r12
 2ba:	0e 94 72 05 	call	0xae4	; 0xae4 <__udivmodsi4>
 2be:	da 01       	movw	r26, r20
 2c0:	c9 01       	movw	r24, r18
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	a1 09       	sbc	r26, r1
 2c6:	b1 09       	sbc	r27, r1
 2c8:	b6 95       	lsr	r27
 2ca:	a7 95       	ror	r26
 2cc:	97 95       	ror	r25
 2ce:	87 95       	ror	r24
 2d0:	8c 01       	movw	r16, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 2d2:	ec 85       	ldd	r30, Y+12	; 0x0c
 2d4:	fd 85       	ldd	r31, Y+13	; 0x0d
 2d6:	10 83       	st	Z, r17
  *_ubrrl = baud_setting;
 2d8:	ee 85       	ldd	r30, Y+14	; 0x0e
 2da:	ff 85       	ldd	r31, Y+15	; 0x0f
 2dc:	00 83       	st	Z, r16

  _written = false;
 2de:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 2e0:	ec 89       	ldd	r30, Y+20	; 0x14
 2e2:	fd 89       	ldd	r31, Y+21	; 0x15
 2e4:	b0 82       	st	Z, r11
  
  sbi(*_ucsrb, RXEN0);
 2e6:	ea 89       	ldd	r30, Y+18	; 0x12
 2e8:	fb 89       	ldd	r31, Y+19	; 0x13
 2ea:	80 81       	ld	r24, Z
 2ec:	80 61       	ori	r24, 0x10	; 16
 2ee:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 2f0:	ea 89       	ldd	r30, Y+18	; 0x12
 2f2:	fb 89       	ldd	r31, Y+19	; 0x13
 2f4:	80 81       	ld	r24, Z
 2f6:	88 60       	ori	r24, 0x08	; 8
 2f8:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 2fa:	ea 89       	ldd	r30, Y+18	; 0x12
 2fc:	fb 89       	ldd	r31, Y+19	; 0x13
 2fe:	80 81       	ld	r24, Z
 300:	80 68       	ori	r24, 0x80	; 128
 302:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 304:	ea 89       	ldd	r30, Y+18	; 0x12
 306:	fb 89       	ldd	r31, Y+19	; 0x13
 308:	80 81       	ld	r24, Z
 30a:	8f 7d       	andi	r24, 0xDF	; 223
 30c:	80 83       	st	Z, r24
}
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	1f 91       	pop	r17
 314:	0f 91       	pop	r16
 316:	ff 90       	pop	r15
 318:	ef 90       	pop	r14
 31a:	df 90       	pop	r13
 31c:	cf 90       	pop	r12
 31e:	bf 90       	pop	r11
 320:	08 95       	ret

00000322 <__vector_18>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
 322:	1f 92       	push	r1
 324:	0f 92       	push	r0
 326:	0f b6       	in	r0, 0x3f	; 63
 328:	0f 92       	push	r0
 32a:	11 24       	eor	r1, r1
 32c:	2f 93       	push	r18
 32e:	8f 93       	push	r24
 330:	9f 93       	push	r25
 332:	af 93       	push	r26
 334:	bf 93       	push	r27
 336:	ef 93       	push	r30
 338:	ff 93       	push	r31
 33a:	e0 91 86 01 	lds	r30, 0x0186	; 0x800186 <__data_end+0x10>
 33e:	f0 91 87 01 	lds	r31, 0x0187	; 0x800187 <__data_end+0x11>
 342:	80 81       	ld	r24, Z
 344:	82 fd       	sbrc	r24, 2
 346:	14 c0       	rjmp	.+40     	; 0x370 <__vector_18+0x4e>
 348:	e6 e7       	ldi	r30, 0x76	; 118
 34a:	f1 e0       	ldi	r31, 0x01	; 1
 34c:	a6 89       	ldd	r26, Z+22	; 0x16
 34e:	b7 89       	ldd	r27, Z+23	; 0x17
 350:	2c 91       	ld	r18, X
 352:	81 8d       	ldd	r24, Z+25	; 0x19
 354:	8f 5f       	subi	r24, 0xFF	; 255
 356:	8f 73       	andi	r24, 0x3F	; 63
 358:	92 8d       	ldd	r25, Z+26	; 0x1a
 35a:	89 17       	cp	r24, r25
 35c:	71 f0       	breq	.+28     	; 0x37a <__vector_18+0x58>
 35e:	df 01       	movw	r26, r30
 360:	e1 8d       	ldd	r30, Z+25	; 0x19
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	ea 58       	subi	r30, 0x8A	; 138
 366:	fe 4f       	sbci	r31, 0xFE	; 254
 368:	25 8f       	std	Z+29, r18	; 0x1d
 36a:	59 96       	adiw	r26, 0x19	; 25
 36c:	8c 93       	st	X, r24
 36e:	05 c0       	rjmp	.+10     	; 0x37a <__vector_18+0x58>
 370:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <__data_end+0x16>
 374:	f0 91 8d 01 	lds	r31, 0x018D	; 0x80018d <__data_end+0x17>
 378:	80 81       	ld	r24, Z
 37a:	ff 91       	pop	r31
 37c:	ef 91       	pop	r30
 37e:	bf 91       	pop	r27
 380:	af 91       	pop	r26
 382:	9f 91       	pop	r25
 384:	8f 91       	pop	r24
 386:	2f 91       	pop	r18
 388:	0f 90       	pop	r0
 38a:	0f be       	out	0x3f, r0	; 63
 38c:	0f 90       	pop	r0
 38e:	1f 90       	pop	r1
 390:	18 95       	reti

00000392 <__vector_19>:
 392:	1f 92       	push	r1
 394:	0f 92       	push	r0
 396:	0f b6       	in	r0, 0x3f	; 63
 398:	0f 92       	push	r0
 39a:	11 24       	eor	r1, r1
 39c:	2f 93       	push	r18
 39e:	3f 93       	push	r19
 3a0:	4f 93       	push	r20
 3a2:	5f 93       	push	r21
 3a4:	6f 93       	push	r22
 3a6:	7f 93       	push	r23
 3a8:	8f 93       	push	r24
 3aa:	9f 93       	push	r25
 3ac:	af 93       	push	r26
 3ae:	bf 93       	push	r27
 3b0:	ef 93       	push	r30
 3b2:	ff 93       	push	r31
 3b4:	86 e7       	ldi	r24, 0x76	; 118
 3b6:	91 e0       	ldi	r25, 0x01	; 1
 3b8:	0e 94 8d 00 	call	0x11a	; 0x11a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 3bc:	ff 91       	pop	r31
 3be:	ef 91       	pop	r30
 3c0:	bf 91       	pop	r27
 3c2:	af 91       	pop	r26
 3c4:	9f 91       	pop	r25
 3c6:	8f 91       	pop	r24
 3c8:	7f 91       	pop	r23
 3ca:	6f 91       	pop	r22
 3cc:	5f 91       	pop	r21
 3ce:	4f 91       	pop	r20
 3d0:	3f 91       	pop	r19
 3d2:	2f 91       	pop	r18
 3d4:	0f 90       	pop	r0
 3d6:	0f be       	out	0x3f, r0	; 63
 3d8:	0f 90       	pop	r0
 3da:	1f 90       	pop	r1
 3dc:	18 95       	reti

000003de <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 3de:	e6 e7       	ldi	r30, 0x76	; 118
 3e0:	f1 e0       	ldi	r31, 0x01	; 1
 3e2:	13 82       	std	Z+3, r1	; 0x03
 3e4:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 3e6:	88 ee       	ldi	r24, 0xE8	; 232
 3e8:	93 e0       	ldi	r25, 0x03	; 3
 3ea:	a0 e0       	ldi	r26, 0x00	; 0
 3ec:	b0 e0       	ldi	r27, 0x00	; 0
 3ee:	84 83       	std	Z+4, r24	; 0x04
 3f0:	95 83       	std	Z+5, r25	; 0x05
 3f2:	a6 83       	std	Z+6, r26	; 0x06
 3f4:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 3f6:	89 e6       	ldi	r24, 0x69	; 105
 3f8:	91 e0       	ldi	r25, 0x01	; 1
 3fa:	91 83       	std	Z+1, r25	; 0x01
 3fc:	80 83       	st	Z, r24
 3fe:	85 ec       	ldi	r24, 0xC5	; 197
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	95 87       	std	Z+13, r25	; 0x0d
 404:	84 87       	std	Z+12, r24	; 0x0c
 406:	84 ec       	ldi	r24, 0xC4	; 196
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	97 87       	std	Z+15, r25	; 0x0f
 40c:	86 87       	std	Z+14, r24	; 0x0e
 40e:	80 ec       	ldi	r24, 0xC0	; 192
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	91 8b       	std	Z+17, r25	; 0x11
 414:	80 8b       	std	Z+16, r24	; 0x10
 416:	81 ec       	ldi	r24, 0xC1	; 193
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	93 8b       	std	Z+19, r25	; 0x13
 41c:	82 8b       	std	Z+18, r24	; 0x12
 41e:	82 ec       	ldi	r24, 0xC2	; 194
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	95 8b       	std	Z+21, r25	; 0x15
 424:	84 8b       	std	Z+20, r24	; 0x14
 426:	86 ec       	ldi	r24, 0xC6	; 198
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	97 8b       	std	Z+23, r25	; 0x17
 42c:	86 8b       	std	Z+22, r24	; 0x16
 42e:	11 8e       	std	Z+25, r1	; 0x19
 430:	12 8e       	std	Z+26, r1	; 0x1a
 432:	13 8e       	std	Z+27, r1	; 0x1b
 434:	14 8e       	std	Z+28, r1	; 0x1c
 436:	08 95       	ret

00000438 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 438:	cf 92       	push	r12
 43a:	df 92       	push	r13
 43c:	ef 92       	push	r14
 43e:	ff 92       	push	r15
 440:	0f 93       	push	r16
 442:	1f 93       	push	r17
 444:	cf 93       	push	r28
 446:	df 93       	push	r29
  size_t n = 0;
  while (size--) {
 448:	41 15       	cp	r20, r1
 44a:	51 05       	cpc	r21, r1
 44c:	b1 f0       	breq	.+44     	; 0x47a <_ZN5Print5writeEPKhj+0x42>
 44e:	8c 01       	movw	r16, r24
 450:	e6 2e       	mov	r14, r22
 452:	f7 2e       	mov	r15, r23
 454:	ea 01       	movw	r28, r20
 456:	c1 2c       	mov	r12, r1
 458:	d1 2c       	mov	r13, r1
    n += write(*buffer++);
 45a:	d7 01       	movw	r26, r14
 45c:	6d 91       	ld	r22, X+
 45e:	7d 01       	movw	r14, r26
 460:	d8 01       	movw	r26, r16
 462:	ed 91       	ld	r30, X+
 464:	fc 91       	ld	r31, X
 466:	01 90       	ld	r0, Z+
 468:	f0 81       	ld	r31, Z
 46a:	e0 2d       	mov	r30, r0
 46c:	c8 01       	movw	r24, r16
 46e:	09 95       	icall
 470:	c8 0e       	add	r12, r24
 472:	d9 1e       	adc	r13, r25
 474:	21 97       	sbiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 476:	89 f7       	brne	.-30     	; 0x45a <_ZN5Print5writeEPKhj+0x22>
 478:	02 c0       	rjmp	.+4      	; 0x47e <_ZN5Print5writeEPKhj+0x46>
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
 47a:	c1 2c       	mov	r12, r1
 47c:	d1 2c       	mov	r13, r1
  while (size--) {
    n += write(*buffer++);
  }
  return n;
}
 47e:	c6 01       	movw	r24, r12
 480:	df 91       	pop	r29
 482:	cf 91       	pop	r28
 484:	1f 91       	pop	r17
 486:	0f 91       	pop	r16
 488:	ff 90       	pop	r15
 48a:	ef 90       	pop	r14
 48c:	df 90       	pop	r13
 48e:	cf 90       	pop	r12
 490:	08 95       	ret

00000492 <dio_Init>:
 *  \pre        dio_InitMemory has been called unless dio_ModuleInitialized is initialized by start-up code.
 *  \note       Specification of module initialization
 **********************************************************************************************************************/
void dio_Init(void)
{
  PORTB = PORTB_INIT;
 492:	8f e3       	ldi	r24, 0x3F	; 63
 494:	85 b9       	out	0x05, r24	; 5
  DDRB = DDRB_INIT;
 496:	14 b8       	out	0x04, r1	; 4

  PORTC = PORTC_INIT;
 498:	99 e3       	ldi	r25, 0x39	; 57
 49a:	98 b9       	out	0x08, r25	; 8
  DDRC = DDRC_INIT;
 49c:	87 b9       	out	0x07, r24	; 7

  PORTD = PORTD_INIT;
 49e:	8c e7       	ldi	r24, 0x7C	; 124
 4a0:	8b b9       	out	0x0b, r24	; 11
  DDRD = DDRD_INIT;
 4a2:	80 e7       	ldi	r24, 0x70	; 112
 4a4:	8a b9       	out	0x0a, r24	; 10
 4a6:	08 95       	ret

000004a8 <dio_config>:
}

void dio_config()
{
  // configure STBN, FR_TXD and EN as output.
  DDRB |= (1<<DDB5) | (1<<DDB3) | (1<<DDB1) ;  
 4a8:	84 b1       	in	r24, 0x04	; 4
 4aa:	8a 62       	ori	r24, 0x2A	; 42
 4ac:	84 b9       	out	0x04, r24	; 4
  EN_HIGH();
 4ae:	2d 9a       	sbi	0x05, 5	; 5
  STBN_HIGH();
 4b0:	2b 9a       	sbi	0x05, 3	; 5
  FR_TXD_HIGH();
 4b2:	29 9a       	sbi	0x05, 1	; 5
  //hier transceiver status word auslesen, um init zustand auf richtigen stand zu bringen
  trcvDio_ReadWord(0);
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	0e 94 a9 02 	call	0x552	; 0x552 <trcvDio_ReadWord>
 4ba:	08 95       	ret

000004bc <reset_dio>:
}

void reset_dio()
{
  //test transceiver
  STBN_HIGH();
 4bc:	2b 9a       	sbi	0x05, 3	; 5
  FR_TXD_HIGH();
 4be:	29 9a       	sbi	0x05, 1	; 5
  FR_TXEN_HIGH();
 4c0:	5d 9a       	sbi	0x0b, 5	; 11
  EN_HIGH();
 4c2:	2d 9a       	sbi	0x05, 5	; 5

  //helping transceiver
  STBY_int_HIGH();
 4c4:	43 9a       	sbi	0x08, 3	; 8
  TXEN_int_HIGH();
 4c6:	5c 9a       	sbi	0x0b, 4	; 11
  TXD_int_HIGH();
 4c8:	5e 9a       	sbi	0x0b, 6	; 11
 4ca:	08 95       	ret

000004cc <dio_WriteChannel>:
 *  \pre        -
 *  \note       -
 **********************************************************************************************************************/
void dio_WriteChannel(uint8 Channel, uint8 value)
{
  if (value == STD_HIGH)
 4cc:	61 30       	cpi	r22, 0x01	; 1
 4ce:	91 f4       	brne	.+36     	; 0x4f4 <dio_WriteChannel+0x28>
  {
    *PortPinDescriptorMap[Channel].pinPortOut |= PortPinDescriptorMap[Channel].pinBit;
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	fc 01       	movw	r30, r24
 4d4:	ee 0f       	add	r30, r30
 4d6:	ff 1f       	adc	r31, r31
 4d8:	ee 0f       	add	r30, r30
 4da:	ff 1f       	adc	r31, r31
 4dc:	8e 0f       	add	r24, r30
 4de:	9f 1f       	adc	r25, r31
 4e0:	fc 01       	movw	r30, r24
 4e2:	e0 50       	subi	r30, 0x00	; 0
 4e4:	ff 4f       	sbci	r31, 0xFF	; 255
 4e6:	a0 81       	ld	r26, Z
 4e8:	b1 81       	ldd	r27, Z+1	; 0x01
 4ea:	9c 91       	ld	r25, X
 4ec:	84 81       	ldd	r24, Z+4	; 0x04
 4ee:	89 2b       	or	r24, r25
 4f0:	8c 93       	st	X, r24
 4f2:	08 95       	ret
  }
  else
  if (value == STD_LOW)  
 4f4:	61 11       	cpse	r22, r1
 4f6:	12 c0       	rjmp	.+36     	; 0x51c <dio_WriteChannel+0x50>
  {
    *PortPinDescriptorMap[Channel].pinPortOut &= ~( PortPinDescriptorMap[Channel].pinBit );
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	fc 01       	movw	r30, r24
 4fc:	ee 0f       	add	r30, r30
 4fe:	ff 1f       	adc	r31, r31
 500:	ee 0f       	add	r30, r30
 502:	ff 1f       	adc	r31, r31
 504:	8e 0f       	add	r24, r30
 506:	9f 1f       	adc	r25, r31
 508:	fc 01       	movw	r30, r24
 50a:	e0 50       	subi	r30, 0x00	; 0
 50c:	ff 4f       	sbci	r31, 0xFF	; 255
 50e:	a0 81       	ld	r26, Z
 510:	b1 81       	ldd	r27, Z+1	; 0x01
 512:	9c 91       	ld	r25, X
 514:	84 81       	ldd	r24, Z+4	; 0x04
 516:	80 95       	com	r24
 518:	89 23       	and	r24, r25
 51a:	8c 93       	st	X, r24
 51c:	08 95       	ret

0000051e <dio_ReadChannel>:
 **********************************************************************************************************************/
uint8 dio_ReadChannel(uint8 Channel)
{
  uint8 retVal;

  retVal = (PortPinDescriptorMap[Channel].pinBit == (*PortPinDescriptorMap[Channel].pinPortIn & PortPinDescriptorMap[Channel].pinBit));
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	fc 01       	movw	r30, r24
 522:	ee 0f       	add	r30, r30
 524:	ff 1f       	adc	r31, r31
 526:	ee 0f       	add	r30, r30
 528:	ff 1f       	adc	r31, r31
 52a:	8e 0f       	add	r24, r30
 52c:	9f 1f       	adc	r25, r31
 52e:	fc 01       	movw	r30, r24
 530:	e0 50       	subi	r30, 0x00	; 0
 532:	ff 4f       	sbci	r31, 0xFF	; 255
 534:	a2 81       	ldd	r26, Z+2	; 0x02
 536:	b3 81       	ldd	r27, Z+3	; 0x03
 538:	9c 91       	ld	r25, X
 53a:	24 81       	ldd	r18, Z+4	; 0x04
 53c:	92 23       	and	r25, r18
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	29 13       	cpse	r18, r25
 542:	80 e0       	ldi	r24, 0x00	; 0
  return(retVal);
}
 544:	08 95       	ret

00000546 <spi_transfer>:
 **********************************************************************************************************************/
uint8 spi_transfer(uint8 data)
{
  uint8 result;

  SPDR = data;
 546:	8e bd       	out	0x2e, r24	; 46
  /* Wait for previous transfer to complete */
  while(0 != (SPSR & _BV(SPIF)));
 548:	0d b4       	in	r0, 0x2d	; 45
 54a:	07 fc       	sbrc	r0, 7
 54c:	fd cf       	rjmp	.-6      	; 0x548 <spi_transfer+0x2>
  result = SPDR;
 54e:	8e b5       	in	r24, 0x2e	; 46

  return(result);
}
 550:	08 95       	ret

00000552 <trcvDio_ReadWord>:
  *  \pre        The module has to be initialized.
  *  \pre        trcv_InitMemory has been called unless trcv_ModuleInitialized is initialized by start-up code.
  *  \note
  **********************************************************************************************************************/
  uint16 trcvDio_ReadWord(uint8 device)
  {
 552:	0f 93       	push	r16
 554:	1f 93       	push	r17
 556:	cf 93       	push	r28
 558:	df 93       	push	r29
    Dio_LevelType TrcvEN;

    result = (FrTrcv_30_Tja1080_StatusWordType)0xFFFF; /* Initial state - no events */

    /* #10 Enter FRTRCV_30_TJA1080_EXCLUSIVE_AREA_1 as reading the status word is timing critical */
    disable(); /* PRQA S 3109 */ /* MD_MSR_14.3 */
 55a:	f8 94       	cli
    /* #20 Preserve the current transceiver state given by EN */
    TrcvEN = dio_ReadChannel(dio_EN);
 55c:	85 e0       	ldi	r24, 0x05	; 5
 55e:	0e 94 8f 02 	call	0x51e	; 0x51e <dio_ReadChannel>
 562:	d8 2f       	mov	r29, r24

    /* #30 Create initial condition to read status word (either 14bits or 15bits depending on EN) */
    cnt=(uint8_least)15u;
    if( TrcvEN == (Dio_LevelType)STD_HIGH )
 564:	81 30       	cpi	r24, 0x01	; 1
 566:	29 f5       	brne	.+74     	; 0x5b2 <trcvDio_ReadWord+0x60>
    { /* #40 Correct initial EN state (EN is clock signal) */
      cnt=(uint8_least)14u;
 568:	ce e0       	ldi	r28, 0x0E	; 14
 56a:	24 c0       	rjmp	.+72     	; 0x5b4 <trcvDio_ReadWord+0x62>
    }

    for( ; cnt > (uint8_least)0u; cnt-- )
    {      
      /* #50 loop over all status bits and read them. Insert wait states for proper timing */
      dio_WriteChannel(dio_EN, (Dio_LevelType)STD_LOW);
 56c:	60 e0       	ldi	r22, 0x00	; 0
 56e:	85 e0       	ldi	r24, 0x05	; 5
 570:	0e 94 66 02 	call	0x4cc	; 0x4cc <dio_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 574:	8a e0       	ldi	r24, 0x0A	; 10
 576:	8a 95       	dec	r24
 578:	f1 f7       	brne	.-4      	; 0x576 <trcvDio_ReadWord+0x24>
 57a:	00 c0       	rjmp	.+0      	; 0x57c <trcvDio_ReadWord+0x2a>
      Appl_FrTrcv_30_Tja1080_Wait((uint8)kFrTrcv_30_Tja1080_delay_tEN_half);
      result <<= 1u;
 57c:	00 0f       	add	r16, r16
 57e:	11 1f       	adc	r17, r17
      dio_WriteChannel(dio_EN, (Dio_LevelType)STD_HIGH);
 580:	61 e0       	ldi	r22, 0x01	; 1
 582:	85 e0       	ldi	r24, 0x05	; 5
 584:	0e 94 66 02 	call	0x4cc	; 0x4cc <dio_WriteChannel>
 588:	8a e0       	ldi	r24, 0x0A	; 10
 58a:	8a 95       	dec	r24
 58c:	f1 f7       	brne	.-4      	; 0x58a <trcvDio_ReadWord+0x38>
 58e:	00 c0       	rjmp	.+0      	; 0x590 <trcvDio_ReadWord+0x3e>
      Appl_FrTrcv_30_Tja1080_Wait((uint8)kFrTrcv_30_Tja1080_delay_tEN_half);
      if( dio_ReadChannel(dio_ERRN) == (Dio_LevelType)STD_HIGH )
 590:	84 e0       	ldi	r24, 0x04	; 4
 592:	0e 94 8f 02 	call	0x51e	; 0x51e <dio_ReadChannel>
 596:	81 30       	cpi	r24, 0x01	; 1
 598:	09 f4       	brne	.+2      	; 0x59c <trcvDio_ReadWord+0x4a>
      {
        result |= (FrTrcv_30_Tja1080_StatusWordType)1u;
 59a:	01 60       	ori	r16, 0x01	; 1
    if( TrcvEN == (Dio_LevelType)STD_HIGH )
    { /* #40 Correct initial EN state (EN is clock signal) */
      cnt=(uint8_least)14u;
    }

    for( ; cnt > (uint8_least)0u; cnt-- )
 59c:	c1 50       	subi	r28, 0x01	; 1
 59e:	31 f7       	brne	.-52     	; 0x56c <trcvDio_ReadWord+0x1a>
        result |= (FrTrcv_30_Tja1080_StatusWordType)1u;
      }
    }

    /* #60 Restore previous transceiver state */
    dio_WriteChannel(dio_EN, TrcvEN);
 5a0:	6d 2f       	mov	r22, r29
 5a2:	85 e0       	ldi	r24, 0x05	; 5
 5a4:	0e 94 66 02 	call	0x4cc	; 0x4cc <dio_WriteChannel>
    /* #70 Leave FRTRCV_30_TJA1080_EXCLUSIVE_AREA_1 as reading the status word is timing critical */
    enable(); /* PRQA S 3109 */ /* MD_MSR_14.3 */
 5a8:	78 94       	sei

    /* #80 High-active flags have to be returned, the transceiver delivers low-active flags --> invert them */
    return(result ^ (FrTrcv_30_Tja1080_StatusWordType)0xFFFF);
 5aa:	c8 01       	movw	r24, r16
 5ac:	80 95       	com	r24
 5ae:	90 95       	com	r25
 5b0:	04 c0       	rjmp	.+8      	; 0x5ba <trcvDio_ReadWord+0x68>
    disable(); /* PRQA S 3109 */ /* MD_MSR_14.3 */
    /* #20 Preserve the current transceiver state given by EN */
    TrcvEN = dio_ReadChannel(dio_EN);

    /* #30 Create initial condition to read status word (either 14bits or 15bits depending on EN) */
    cnt=(uint8_least)15u;
 5b2:	cf e0       	ldi	r28, 0x0F	; 15
  *  \pre        The module has to be initialized.
  *  \pre        trcv_InitMemory has been called unless trcv_ModuleInitialized is initialized by start-up code.
  *  \note
  **********************************************************************************************************************/
  uint16 trcvDio_ReadWord(uint8 device)
  {
 5b4:	0f ef       	ldi	r16, 0xFF	; 255
 5b6:	1f ef       	ldi	r17, 0xFF	; 255
 5b8:	d9 cf       	rjmp	.-78     	; 0x56c <trcvDio_ReadWord+0x1a>
    /* #70 Leave FRTRCV_30_TJA1080_EXCLUSIVE_AREA_1 as reading the status word is timing critical */
    enable(); /* PRQA S 3109 */ /* MD_MSR_14.3 */

    /* #80 High-active flags have to be returned, the transceiver delivers low-active flags --> invert them */
    return(result ^ (FrTrcv_30_Tja1080_StatusWordType)0xFFFF);
  }
 5ba:	df 91       	pop	r29
 5bc:	cf 91       	pop	r28
 5be:	1f 91       	pop	r17
 5c0:	0f 91       	pop	r16
 5c2:	08 95       	ret

000005c4 <trcvSpi_writeWord>:
 *  \pre        The module has to be initialized.
 *  \pre        trcv_InitMemory has been called unless trcv_ModuleInitialized is initialized by start-up code.
 *  \note       
 **********************************************************************************************************************/
uint16 trcvSpi_writeWord(uint16 data, uint8 device)
{
 5c4:	1f 93       	push	r17
 5c6:	cf 93       	push	r28
 5c8:	df 93       	push	r29
 5ca:	18 2f       	mov	r17, r24
 5cc:	89 2f       	mov	r24, r25
  uint16 result;

  /* Enable CS */
  if(device == 0)
 5ce:	61 11       	cpse	r22, r1
 5d0:	0f c0       	rjmp	.+30     	; 0x5f0 <trcvSpi_writeWord+0x2c>
  {
    CS1_ON();
 5d2:	2a 9a       	sbi	0x05, 2	; 5
  {
    CS2_ON();
  }

  /* Read/Write 16 bit word */
  result  = (uint16)spi_transfer(data >> 8) << 8;
 5d4:	0e 94 a3 02 	call	0x546	; 0x546 <spi_transfer>
 5d8:	c8 2f       	mov	r28, r24
 5da:	d0 e0       	ldi	r29, 0x00	; 0
 5dc:	dc 2f       	mov	r29, r28
 5de:	cc 27       	eor	r28, r28
  result |= spi_transfer(data & 0xff);
 5e0:	81 2f       	mov	r24, r17
 5e2:	0e 94 a3 02 	call	0x546	; 0x546 <spi_transfer>
 5e6:	9e 01       	movw	r18, r28
 5e8:	28 2b       	or	r18, r24
 5ea:	c9 01       	movw	r24, r18

  /* Disable CS */
  if(device == 0)
  {
    CS1_OFF();
 5ec:	2a 98       	cbi	0x05, 2	; 5
 5ee:	0e c0       	rjmp	.+28     	; 0x60c <trcvSpi_writeWord+0x48>
  {
    CS1_ON();
  }
  else
  {
    CS2_ON();
 5f0:	44 9a       	sbi	0x08, 4	; 8
  }

  /* Read/Write 16 bit word */
  result  = (uint16)spi_transfer(data >> 8) << 8;
 5f2:	0e 94 a3 02 	call	0x546	; 0x546 <spi_transfer>
 5f6:	c8 2f       	mov	r28, r24
 5f8:	d0 e0       	ldi	r29, 0x00	; 0
 5fa:	dc 2f       	mov	r29, r28
 5fc:	cc 27       	eor	r28, r28
  result |= spi_transfer(data & 0xff);
 5fe:	81 2f       	mov	r24, r17
 600:	0e 94 a3 02 	call	0x546	; 0x546 <spi_transfer>
 604:	9e 01       	movw	r18, r28
 606:	28 2b       	or	r18, r24
 608:	c9 01       	movw	r24, r18
  {
    CS1_OFF();
  }
  else
  {
    CS2_OFF();
 60a:	44 98       	cbi	0x08, 4	; 8
  }

  return(result);
}
 60c:	df 91       	pop	r29
 60e:	cf 91       	pop	r28
 610:	1f 91       	pop	r17
 612:	08 95       	ret

00000614 <ArdComplexOp_wakeUpPattern>:
#include <avr/io.h>
#include "dio_Cfg.h"
//#include "dio.h"

void ArdComplexOp_wakeUpPattern(uint8 aa)
{
 614:	cf 93       	push	r28
 616:	df 93       	push	r29
 618:	1f 92       	push	r1
 61a:	cd b7       	in	r28, 0x3d	; 61
 61c:	de b7       	in	r29, 0x3e	; 62
  volatile uint8 i = 0;
 61e:	19 82       	std	Y+1, r1	; 0x01
  TXEN_int_LOW();
 620:	5c 98       	cbi	0x0b, 4	; 11
 622:	ef e8       	ldi	r30, 0x8F	; 143
 624:	f1 e0       	ldi	r31, 0x01	; 1
 626:	31 97       	sbiw	r30, 0x01	; 1
 628:	f1 f7       	brne	.-4      	; 0x626 <ArdComplexOp_wakeUpPattern+0x12>
 62a:	00 c0       	rjmp	.+0      	; 0x62c <ArdComplexOp_wakeUpPattern+0x18>
 62c:	00 00       	nop
  _delay_us(100); // wait until tranceiver gets configured
  for ( ; i < aa; i++ )
 62e:	99 81       	ldd	r25, Y+1	; 0x01
 630:	98 17       	cp	r25, r24
 632:	80 f4       	brcc	.+32     	; 0x654 <ArdComplexOp_wakeUpPattern+0x40>
  {
    TXD_int_LOW();
 634:	5e 98       	cbi	0x0b, 6	; 11
    TXEN_int_LOW();
 636:	5c 98       	cbi	0x0b, 4	; 11
 638:	f0 e2       	ldi	r31, 0x20	; 32
 63a:	fa 95       	dec	r31
 63c:	f1 f7       	brne	.-4      	; 0x63a <ArdComplexOp_wakeUpPattern+0x26>
    _delay_us(6);
    TXD_int_HIGH();
 63e:	5e 9a       	sbi	0x0b, 6	; 11
    TXEN_int_HIGH();
 640:	5c 9a       	sbi	0x0b, 4	; 11
 642:	90 e6       	ldi	r25, 0x60	; 96
 644:	9a 95       	dec	r25
 646:	f1 f7       	brne	.-4      	; 0x644 <ArdComplexOp_wakeUpPattern+0x30>
void ArdComplexOp_wakeUpPattern(uint8 aa)
{
  volatile uint8 i = 0;
  TXEN_int_LOW();
  _delay_us(100); // wait until tranceiver gets configured
  for ( ; i < aa; i++ )
 648:	99 81       	ldd	r25, Y+1	; 0x01
 64a:	9f 5f       	subi	r25, 0xFF	; 255
 64c:	99 83       	std	Y+1, r25	; 0x01
 64e:	99 81       	ldd	r25, Y+1	; 0x01
 650:	98 17       	cp	r25, r24
 652:	80 f3       	brcs	.-32     	; 0x634 <ArdComplexOp_wakeUpPattern+0x20>
    _delay_us(6);
    TXD_int_HIGH();
    TXEN_int_HIGH();
    _delay_us(18);
  }
  TXEN_int_HIGH();
 654:	5c 9a       	sbi	0x0b, 4	; 11
}
 656:	0f 90       	pop	r0
 658:	df 91       	pop	r29
 65a:	cf 91       	pop	r28
 65c:	08 95       	ret

0000065e <ArdComplexOp_lokalWakeUp>:

void ArdComplexOp_lokalWakeUp()
{
  CS2_OFF();
 65e:	44 98       	cbi	0x08, 4	; 8
 660:	87 ec       	ldi	r24, 0xC7	; 199
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	01 97       	sbiw	r24, 0x01	; 1
 666:	f1 f7       	brne	.-4      	; 0x664 <ArdComplexOp_lokalWakeUp+0x6>
 668:	00 c0       	rjmp	.+0      	; 0x66a <ArdComplexOp_lokalWakeUp+0xc>
 66a:	00 00       	nop
  _delay_us(50);
  CS2_ON();
 66c:	44 9a       	sbi	0x08, 4	; 8
 66e:	08 95       	ret

00000670 <ArdComplexOp_forceBusCollition>:
}

void ArdComplexOp_forceBusCollition()
{
  uint8 i = 0;
  TXEN_int_LOW();
 670:	5c 98       	cbi	0x0b, 4	; 11
  FR_TXEN_LOW();
 672:	5d 98       	cbi	0x0b, 5	; 11
 674:	8f e8       	ldi	r24, 0x8F	; 143
 676:	91 e0       	ldi	r25, 0x01	; 1
 678:	01 97       	sbiw	r24, 0x01	; 1
 67a:	f1 f7       	brne	.-4      	; 0x678 <ArdComplexOp_forceBusCollition+0x8>
 67c:	00 c0       	rjmp	.+0      	; 0x67e <ArdComplexOp_forceBusCollition+0xe>
 67e:	00 00       	nop
 680:	82 e0       	ldi	r24, 0x02	; 2
  _delay_us(100);
  for ( ; i < 2; i++ )
  {
    TXD_int_HIGH();
 682:	5e 9a       	sbi	0x0b, 6	; 11
 684:	ef e8       	ldi	r30, 0x8F	; 143
 686:	f1 e0       	ldi	r31, 0x01	; 1
 688:	31 97       	sbiw	r30, 0x01	; 1
 68a:	f1 f7       	brne	.-4      	; 0x688 <ArdComplexOp_forceBusCollition+0x18>
 68c:	00 c0       	rjmp	.+0      	; 0x68e <ArdComplexOp_forceBusCollition+0x1e>
 68e:	00 00       	nop
    _delay_us(100);
    FR_TXD_HIGH();
 690:	29 9a       	sbi	0x05, 1	; 5
 692:	ef e8       	ldi	r30, 0x8F	; 143
 694:	f1 e0       	ldi	r31, 0x01	; 1
 696:	31 97       	sbiw	r30, 0x01	; 1
 698:	f1 f7       	brne	.-4      	; 0x696 <ArdComplexOp_forceBusCollition+0x26>
 69a:	00 c0       	rjmp	.+0      	; 0x69c <ArdComplexOp_forceBusCollition+0x2c>
 69c:	00 00       	nop
    _delay_us(100);
    TXD_int_LOW();
 69e:	5e 98       	cbi	0x0b, 6	; 11
 6a0:	ef e8       	ldi	r30, 0x8F	; 143
 6a2:	f1 e0       	ldi	r31, 0x01	; 1
 6a4:	31 97       	sbiw	r30, 0x01	; 1
 6a6:	f1 f7       	brne	.-4      	; 0x6a4 <ArdComplexOp_forceBusCollition+0x34>
 6a8:	00 c0       	rjmp	.+0      	; 0x6aa <ArdComplexOp_forceBusCollition+0x3a>
 6aa:	00 00       	nop
    _delay_us(100);
    FR_TXD_LOW();
 6ac:	29 98       	cbi	0x05, 1	; 5
 6ae:	ef e8       	ldi	r30, 0x8F	; 143
 6b0:	f1 e0       	ldi	r31, 0x01	; 1
 6b2:	31 97       	sbiw	r30, 0x01	; 1
 6b4:	f1 f7       	brne	.-4      	; 0x6b2 <ArdComplexOp_forceBusCollition+0x42>
 6b6:	00 c0       	rjmp	.+0      	; 0x6b8 <ArdComplexOp_forceBusCollition+0x48>
 6b8:	00 00       	nop
 6ba:	81 50       	subi	r24, 0x01	; 1
{
  uint8 i = 0;
  TXEN_int_LOW();
  FR_TXEN_LOW();
  _delay_us(100);
  for ( ; i < 2; i++ )
 6bc:	11 f7       	brne	.-60     	; 0x682 <ArdComplexOp_forceBusCollition+0x12>
    TXD_int_LOW();
    _delay_us(100);
    FR_TXD_LOW();
    _delay_us(100);
  }
  TXEN_int_HIGH();
 6be:	5c 9a       	sbi	0x0b, 4	; 11
  FR_TXEN_HIGH();
 6c0:	5d 9a       	sbi	0x0b, 5	; 11
 6c2:	08 95       	ret

000006c4 <ArdComplexOp_forceTxEntimeout>:
}

void ArdComplexOp_forceTxEntimeout()
{
  FR_TXEN_LOW();
 6c4:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6c6:	2f ef       	ldi	r18, 0xFF	; 255
 6c8:	89 ef       	ldi	r24, 0xF9	; 249
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	21 50       	subi	r18, 0x01	; 1
 6ce:	80 40       	sbci	r24, 0x00	; 0
 6d0:	90 40       	sbci	r25, 0x00	; 0
 6d2:	e1 f7       	brne	.-8      	; 0x6cc <ArdComplexOp_forceTxEntimeout+0x8>
 6d4:	00 c0       	rjmp	.+0      	; 0x6d6 <ArdComplexOp_forceTxEntimeout+0x12>
 6d6:	00 00       	nop
  _delay_ms(20);
  FR_TXEN_HIGH();
 6d8:	5d 9a       	sbi	0x0b, 5	; 11
 6da:	08 95       	ret

000006dc <ArdCom_ComplexOP_ClampVbat>:
}

void ArdCom_ComplexOP_ClampVbat(uint8 ed)
{
  if(ed == 0) 
 6dc:	81 11       	cpse	r24, r1
 6de:	02 c0       	rjmp	.+4      	; 0x6e4 <ArdCom_ComplexOP_ClampVbat+0x8>
    VinVBat_LOW(); 
 6e0:	40 98       	cbi	0x08, 0	; 8
 6e2:	08 95       	ret
  else
    VinVBat_HIGH();
 6e4:	40 9a       	sbi	0x08, 0	; 8
 6e6:	08 95       	ret

000006e8 <__vector_16>:
volatile uint8 mask = 0;
uint8  vAlive;

/* 1ms timer interrupt */
ISR(TIMER0_OVF_vect)
{
 6e8:	1f 92       	push	r1
 6ea:	0f 92       	push	r0
 6ec:	0f b6       	in	r0, 0x3f	; 63
 6ee:	0f 92       	push	r0
 6f0:	11 24       	eor	r1, r1
 6f2:	8f 93       	push	r24
 6f4:	9f 93       	push	r25
 6f6:	af 93       	push	r26
 6f8:	bf 93       	push	r27
	osTicks++;
 6fa:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <osTicks>
 6fe:	8f 5f       	subi	r24, 0xFF	; 255
 700:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <osTicks>
	msCounter++;
 704:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <msCounter>
 708:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <msCounter+0x1>
 70c:	a0 91 17 02 	lds	r26, 0x0217	; 0x800217 <msCounter+0x2>
 710:	b0 91 18 02 	lds	r27, 0x0218	; 0x800218 <msCounter+0x3>
 714:	01 96       	adiw	r24, 0x01	; 1
 716:	a1 1d       	adc	r26, r1
 718:	b1 1d       	adc	r27, r1
 71a:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <msCounter>
 71e:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <msCounter+0x1>
 722:	a0 93 17 02 	sts	0x0217, r26	; 0x800217 <msCounter+0x2>
 726:	b0 93 18 02 	sts	0x0218, r27	; 0x800218 <msCounter+0x3>
}
 72a:	bf 91       	pop	r27
 72c:	af 91       	pop	r26
 72e:	9f 91       	pop	r25
 730:	8f 91       	pop	r24
 732:	0f 90       	pop	r0
 734:	0f be       	out	0x3f, r0	; 63
 736:	0f 90       	pop	r0
 738:	1f 90       	pop	r1
 73a:	18 95       	reti

0000073c <main>:



int main(void)
{
	msCounter = 0;
 73c:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <msCounter>
 740:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <msCounter+0x1>
 744:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <msCounter+0x2>
 748:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <msCounter+0x3>
	
	/* First initialize all I/O ports for save initial state */
	dio_Init();
 74c:	0e 94 49 02 	call	0x492	; 0x492 <dio_Init>
	protocol_Init();
 750:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <protocol_Init>
	
	sei();
 754:	78 94       	sei
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 756:	26 e0       	ldi	r18, 0x06	; 6
 758:	40 e0       	ldi	r20, 0x00	; 0
 75a:	52 ec       	ldi	r21, 0xC2	; 194
 75c:	61 e0       	ldi	r22, 0x01	; 1
 75e:	70 e0       	ldi	r23, 0x00	; 0
 760:	86 e7       	ldi	r24, 0x76	; 118
 762:	91 e0       	ldi	r25, 0x01	; 1
 764:	0e 94 28 01 	call	0x250	; 0x250 <_ZN14HardwareSerial5beginEmh>
	/* start the SPI library: */
	//SPI.begin();
	
	/* Set up timer 0 as time base */
	/* 1ms cycle */
	OCR0A = 125-1;
 768:	8c e7       	ldi	r24, 0x7C	; 124
 76a:	87 bd       	out	0x27, r24	; 39
	/* Fast PWM Mode */
	TCCR0A = _BV(WGM01) | _BV(WGM00);
 76c:	83 e0       	ldi	r24, 0x03	; 3
 76e:	84 bd       	out	0x24, r24	; 36
	/* Prescaler 128 */
	TCCR0B = _BV(WGM02) | _BV(CS02) | _BV(CS00);
 770:	8d e0       	ldi	r24, 0x0D	; 13
 772:	85 bd       	out	0x25, r24	; 37
	/* Enable Interrupt */
	TIMSK0 = _BV(TOIE0);
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	
	LEDA_TOGGLE();
 77a:	95 b1       	in	r25, 0x05	; 5
 77c:	80 e2       	ldi	r24, 0x20	; 32
 77e:	89 27       	eor	r24, r25
 780:	85 b9       	out	0x05, r24	; 5
 782:	12 c0       	rjmp	.+36     	; 0x7a8 <main+0x6c>
	/* Enter endless loop */
	while(1)
	{
		while(osTicks > 0u)
		{  /* This is our 1ms task */
			osTicks--;
 784:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <osTicks>
 788:	81 50       	subi	r24, 0x01	; 1
 78a:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <osTicks>
			vAlive++;
 78e:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <vAlive>
 792:	91 e0       	ldi	r25, 0x01	; 1
 794:	98 0f       	add	r25, r24
			if(vAlive >= 128)
 796:	1a f0       	brmi	.+6      	; 0x79e <main+0x62>
	while(1)
	{
		while(osTicks > 0u)
		{  /* This is our 1ms task */
			osTicks--;
			vAlive++;
 798:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <vAlive>
 79c:	03 c0       	rjmp	.+6      	; 0x7a4 <main+0x68>
			if(vAlive >= 128)
			{
				vAlive -= 128;
 79e:	8f 57       	subi	r24, 0x7F	; 127
 7a0:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <vAlive>
			}
      protocol_Handler();
 7a4:	0e 94 2c 05 	call	0xa58	; 0xa58 <protocol_Handler>
	LEDA_TOGGLE();
	
	/* Enter endless loop */
	while(1)
	{
		while(osTicks > 0u)
 7a8:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <osTicks>
 7ac:	81 11       	cpse	r24, r1
 7ae:	ea cf       	rjmp	.-44     	; 0x784 <main+0x48>
 7b0:	fb cf       	rjmp	.-10     	; 0x7a8 <main+0x6c>

000007b2 <protocol_Init>:
  *  \pre        protocol_InitMemory has been called unless protocol_ModuleInitialized is initialized by start-up code.
  *  \note       Specification of module initialization
  **********************************************************************************************************************/
  void protocol_Init(void)
  {
    txMessage[0] = 0x00;
 7b2:	ea e1       	ldi	r30, 0x1A	; 26
 7b4:	f2 e0       	ldi	r31, 0x02	; 2
 7b6:	10 82       	st	Z, r1
    txMessage[1] = sciCMD_NOK;
 7b8:	11 82       	std	Z+1, r1	; 0x01
    txMessage[2] = 0x00;
 7ba:	12 82       	std	Z+2, r1	; 0x02
    txMessage[3] = 0x00;    
 7bc:	13 82       	std	Z+3, r1	; 0x03
 7be:	08 95       	ret

000007c0 <protocol_Dispatcher>:
  *  \pre        protocol_InitMemory has been called unless protocol_ModuleInitialized is initialized by start-up code.
  *  \note
  **********************************************************************************************************************/
  /* decode received frame */
  void protocol_Dispatcher()
  {
 7c0:	1f 93       	push	r17
 7c2:	cf 93       	push	r28
 7c4:	df 93       	push	r29
    uint8 aa;
    uint8 aa2pc;
    uint16 data;
    uint8 ed;

    switch(rxMessage[0])
 7c6:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <rxMessage>
 7ca:	21 32       	cpi	r18, 0x21	; 33
 7cc:	09 f4       	brne	.+2      	; 0x7d0 <protocol_Dispatcher+0x10>
 7ce:	91 c0       	rjmp	.+290    	; 0x8f2 <protocol_Dispatcher+0x132>
 7d0:	40 f4       	brcc	.+16     	; 0x7e2 <protocol_Dispatcher+0x22>
 7d2:	20 31       	cpi	r18, 0x10	; 16
 7d4:	31 f1       	breq	.+76     	; 0x822 <protocol_Dispatcher+0x62>
 7d6:	20 32       	cpi	r18, 0x20	; 32
 7d8:	09 f4       	brne	.+2      	; 0x7dc <protocol_Dispatcher+0x1c>
 7da:	42 c0       	rjmp	.+132    	; 0x860 <protocol_Dispatcher+0xa0>
 7dc:	21 11       	cpse	r18, r1
 7de:	38 c1       	rjmp	.+624    	; 0xa50 <__stack+0x151>
 7e0:	0a c0       	rjmp	.+20     	; 0x7f6 <protocol_Dispatcher+0x36>
 7e2:	20 34       	cpi	r18, 0x40	; 64
 7e4:	09 f4       	brne	.+2      	; 0x7e8 <protocol_Dispatcher+0x28>
 7e6:	e0 c0       	rjmp	.+448    	; 0x9a8 <__stack+0xa9>
 7e8:	20 36       	cpi	r18, 0x60	; 96
 7ea:	09 f4       	brne	.+2      	; 0x7ee <protocol_Dispatcher+0x2e>
 7ec:	19 c1       	rjmp	.+562    	; 0xa20 <__stack+0x121>
 7ee:	20 33       	cpi	r18, 0x30	; 48
 7f0:	09 f0       	breq	.+2      	; 0x7f4 <protocol_Dispatcher+0x34>
 7f2:	2e c1       	rjmp	.+604    	; 0xa50 <__stack+0x151>
 7f4:	a7 c0       	rjmp	.+334    	; 0x944 <__stack+0x45>
    {
      case sciCOMMAND_VERSION :
      txMessage[0] = sciCOMMAND_VERSION;
 7f6:	ea e1       	ldi	r30, 0x1A	; 26
 7f8:	f2 e0       	ldi	r31, 0x02	; 2
 7fa:	10 82       	st	Z, r1
      txMessage[1] = SW_MAJOR_VERSION;
 7fc:	81 e0       	ldi	r24, 0x01	; 1
 7fe:	81 83       	std	Z+1, r24	; 0x01
      txMessage[2] = SW_MINOR_VERSION;
 800:	12 82       	std	Z+2, r1	; 0x02
      txMessage[3] = SW_PATCH_VERSION;
 802:	13 82       	std	Z+3, r1	; 0x03
      Serial.write(txMessage, 4);
 804:	e0 91 76 01 	lds	r30, 0x0176	; 0x800176 <__data_end>
 808:	f0 91 77 01 	lds	r31, 0x0177	; 0x800177 <__data_end+0x1>
 80c:	02 80       	ldd	r0, Z+2	; 0x02
 80e:	f3 81       	ldd	r31, Z+3	; 0x03
 810:	e0 2d       	mov	r30, r0
 812:	44 e0       	ldi	r20, 0x04	; 4
 814:	50 e0       	ldi	r21, 0x00	; 0
 816:	6a e1       	ldi	r22, 0x1A	; 26
 818:	72 e0       	ldi	r23, 0x02	; 2
 81a:	86 e7       	ldi	r24, 0x76	; 118
 81c:	91 e0       	ldi	r25, 0x01	; 1
 81e:	09 95       	icall
      break;
 820:	17 c1       	rjmp	.+558    	; 0xa50 <__stack+0x151>

      case sciTRCV_DEVICE_MODE :      
      aa = rxMessage[1];
 822:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <rxMessage+0x1>
      TrcvType = aa;
 826:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <TrcvType>
      //change the initial transceiver pin configuration to DIO-Mode
      if(TrcvType == 0x00 || TrcvType == 0x01)
 82a:	82 30       	cpi	r24, 0x02	; 2
 82c:	10 f4       	brcc	.+4      	; 0x832 <protocol_Dispatcher+0x72>
      {
        dio_config();        
 82e:	0e 94 54 02 	call	0x4a8	; 0x4a8 <dio_config>
      }
      txMessage[0] = sciTRCV_DEVICE_MODE;
 832:	ea e1       	ldi	r30, 0x1A	; 26
 834:	f2 e0       	ldi	r31, 0x02	; 2
 836:	80 e1       	ldi	r24, 0x10	; 16
 838:	80 83       	st	Z, r24
      txMessage[1] = sciCMD_OK;
 83a:	81 e0       	ldi	r24, 0x01	; 1
 83c:	81 83       	std	Z+1, r24	; 0x01
      txMessage[2] = sciCMD_DONTCARE;
 83e:	12 82       	std	Z+2, r1	; 0x02
      txMessage[3] = sciCMD_DONTCARE;
 840:	13 82       	std	Z+3, r1	; 0x03
      Serial.write(txMessage, 4);
 842:	e0 91 76 01 	lds	r30, 0x0176	; 0x800176 <__data_end>
 846:	f0 91 77 01 	lds	r31, 0x0177	; 0x800177 <__data_end+0x1>
 84a:	02 80       	ldd	r0, Z+2	; 0x02
 84c:	f3 81       	ldd	r31, Z+3	; 0x03
 84e:	e0 2d       	mov	r30, r0
 850:	44 e0       	ldi	r20, 0x04	; 4
 852:	50 e0       	ldi	r21, 0x00	; 0
 854:	6a e1       	ldi	r22, 0x1A	; 26
 856:	72 e0       	ldi	r23, 0x02	; 2
 858:	86 e7       	ldi	r24, 0x76	; 118
 85a:	91 e0       	ldi	r25, 0x01	; 1
 85c:	09 95       	icall
      break;
 85e:	f8 c0       	rjmp	.+496    	; 0xa50 <__stack+0x151>

      case sciSET_DIO :
      nr = rxMessage[1];
 860:	ee e1       	ldi	r30, 0x1E	; 30
 862:	f2 e0       	ldi	r31, 0x02	; 2
 864:	d1 81       	ldd	r29, Z+1	; 0x01
      aa = rxMessage[3];
 866:	c3 81       	ldd	r28, Z+3	; 0x03
      txMessage[0] = sciSET_DIO;
 868:	90 e2       	ldi	r25, 0x20	; 32
 86a:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <txMessage>
      txMessage[1] = (TrcvType != 0xFF) ? sciCMD_OK : sciCMD_NOK;
 86e:	91 e0       	ldi	r25, 0x01	; 1
 870:	20 91 64 01 	lds	r18, 0x0164	; 0x800164 <TrcvType>
 874:	2f 3f       	cpi	r18, 0xFF	; 255
 876:	09 f4       	brne	.+2      	; 0x87a <protocol_Dispatcher+0xba>
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <txMessage+0x1>
      txMessage[2] = sciCMD_DONTCARE;
 87e:	ea e1       	ldi	r30, 0x1A	; 26
 880:	f2 e0       	ldi	r31, 0x02	; 2
 882:	12 82       	std	Z+2, r1	; 0x02
      txMessage[3] = sciCMD_DONTCARE;
 884:	13 82       	std	Z+3, r1	; 0x03
      Serial.write(txMessage, 4);
 886:	e0 91 76 01 	lds	r30, 0x0176	; 0x800176 <__data_end>
 88a:	f0 91 77 01 	lds	r31, 0x0177	; 0x800177 <__data_end+0x1>
 88e:	02 80       	ldd	r0, Z+2	; 0x02
 890:	f3 81       	ldd	r31, Z+3	; 0x03
 892:	e0 2d       	mov	r30, r0
 894:	44 e0       	ldi	r20, 0x04	; 4
 896:	50 e0       	ldi	r21, 0x00	; 0
 898:	6a e1       	ldi	r22, 0x1A	; 26
 89a:	72 e0       	ldi	r23, 0x02	; 2
 89c:	86 e7       	ldi	r24, 0x76	; 118
 89e:	91 e0       	ldi	r25, 0x01	; 1
 8a0:	09 95       	icall

      if(TrcvType != 0xFF)
 8a2:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <TrcvType>
 8a6:	9f 3f       	cpi	r25, 0xFF	; 255
 8a8:	09 f4       	brne	.+2      	; 0x8ac <protocol_Dispatcher+0xec>
 8aa:	d2 c0       	rjmp	.+420    	; 0xa50 <__stack+0x151>
      {
        switch(nr)
 8ac:	d1 11       	cpse	r29, r1
 8ae:	1c c0       	rjmp	.+56     	; 0x8e8 <protocol_Dispatcher+0x128>
        {
          case pinMODE:
          switch(aa)
 8b0:	c1 30       	cpi	r28, 0x01	; 1
 8b2:	59 f0       	breq	.+22     	; 0x8ca <protocol_Dispatcher+0x10a>
 8b4:	28 f0       	brcs	.+10     	; 0x8c0 <protocol_Dispatcher+0x100>
 8b6:	c2 30       	cpi	r28, 0x02	; 2
 8b8:	69 f0       	breq	.+26     	; 0x8d4 <protocol_Dispatcher+0x114>
 8ba:	c3 30       	cpi	r28, 0x03	; 3
 8bc:	81 f0       	breq	.+32     	; 0x8de <protocol_Dispatcher+0x11e>
 8be:	c8 c0       	rjmp	.+400    	; 0xa50 <__stack+0x151>
          {
            case 0: disable();
 8c0:	f8 94       	cli
            EN_LOW();
 8c2:	2d 98       	cbi	0x05, 5	; 5
            STBN_LOW();
 8c4:	2b 98       	cbi	0x05, 3	; 5
            enable();
 8c6:	78 94       	sei
            break;
 8c8:	c3 c0       	rjmp	.+390    	; 0xa50 <__stack+0x151>
            case 1: disable();
 8ca:	f8 94       	cli
            EN_LOW();
 8cc:	2d 98       	cbi	0x05, 5	; 5
            STBN_HIGH();
 8ce:	2b 9a       	sbi	0x05, 3	; 5
            enable();
 8d0:	78 94       	sei
            break;
 8d2:	be c0       	rjmp	.+380    	; 0xa50 <__stack+0x151>
            case 2: disable();
 8d4:	f8 94       	cli
            EN_HIGH();
 8d6:	2d 9a       	sbi	0x05, 5	; 5
            STBN_LOW();
 8d8:	2b 98       	cbi	0x05, 3	; 5
            enable();
 8da:	78 94       	sei
            break;
 8dc:	b9 c0       	rjmp	.+370    	; 0xa50 <__stack+0x151>
            case 3: disable();
 8de:	f8 94       	cli
            EN_HIGH();
 8e0:	2d 9a       	sbi	0x05, 5	; 5
            STBN_HIGH();
 8e2:	2b 9a       	sbi	0x05, 3	; 5
            enable();
 8e4:	78 94       	sei
            break;
 8e6:	b4 c0       	rjmp	.+360    	; 0xa50 <__stack+0x151>
          
          default:
          {
            /* direct mapping */
            /* requested I/O pin rxMessage[1] equals dio pin description */
            dio_WriteChannel(nr, aa);            
 8e8:	6c 2f       	mov	r22, r28
 8ea:	8d 2f       	mov	r24, r29
 8ec:	0e 94 66 02 	call	0x4cc	; 0x4cc <dio_WriteChannel>
          }break;
 8f0:	af c0       	rjmp	.+350    	; 0xa50 <__stack+0x151>
      break;

      case sciGET_DIO :
      /* direct mapping */
      /* requested I/O pin rxMessage[1] equals dio pin description */
      nr = rxMessage[1];
 8f2:	c0 91 1f 02 	lds	r28, 0x021F	; 0x80021f <rxMessage+0x1>
      aa2pc = (TrcvType != 0xFF) ? dio_ReadChannel(nr) : 0;
 8f6:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <TrcvType>
 8fa:	8f 3f       	cpi	r24, 0xFF	; 255
 8fc:	21 f0       	breq	.+8      	; 0x906 <__stack+0x7>
 8fe:	8c 2f       	mov	r24, r28
 900:	0e 94 8f 02 	call	0x51e	; 0x51e <dio_ReadChannel>
 904:	01 c0       	rjmp	.+2      	; 0x908 <__stack+0x9>
 906:	80 e0       	ldi	r24, 0x00	; 0
      txMessage[3] = aa2pc; //muss bei SPI angepasst werden
 908:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <txMessage+0x3>
      txMessage[1] = (TrcvType != 0xFF) ? sciCMD_OK : sciCMD_NOK;
 90c:	81 e0       	ldi	r24, 0x01	; 1
 90e:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <TrcvType>
 912:	9f 3f       	cpi	r25, 0xFF	; 255
 914:	09 f4       	brne	.+2      	; 0x918 <__stack+0x19>
 916:	80 e0       	ldi	r24, 0x00	; 0
 918:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <txMessage+0x1>
      txMessage[0] = sciGET_DIO;
 91c:	ea e1       	ldi	r30, 0x1A	; 26
 91e:	f2 e0       	ldi	r31, 0x02	; 2
 920:	81 e2       	ldi	r24, 0x21	; 33
 922:	80 83       	st	Z, r24
      txMessage[2] = nr;
 924:	c2 83       	std	Z+2, r28	; 0x02
      Serial.write(txMessage, 4);
 926:	e0 91 76 01 	lds	r30, 0x0176	; 0x800176 <__data_end>
 92a:	f0 91 77 01 	lds	r31, 0x0177	; 0x800177 <__data_end+0x1>
 92e:	02 80       	ldd	r0, Z+2	; 0x02
 930:	f3 81       	ldd	r31, Z+3	; 0x03
 932:	e0 2d       	mov	r30, r0
 934:	44 e0       	ldi	r20, 0x04	; 4
 936:	50 e0       	ldi	r21, 0x00	; 0
 938:	6a e1       	ldi	r22, 0x1A	; 26
 93a:	72 e0       	ldi	r23, 0x02	; 2
 93c:	86 e7       	ldi	r24, 0x76	; 118
 93e:	91 e0       	ldi	r25, 0x01	; 1
 940:	09 95       	icall
      break;
 942:	86 c0       	rjmp	.+268    	; 0xa50 <__stack+0x151>

      case sciTRCV_STATUS_WORD :
      data = ((uint16)rxMessage[2] << 8) | rxMessage[3];
 944:	ee e1       	ldi	r30, 0x1E	; 30
 946:	f2 e0       	ldi	r31, 0x02	; 2
 948:	42 81       	ldd	r20, Z+2	; 0x02
 94a:	33 81       	ldd	r19, Z+3	; 0x03
      aa = rxMessage[1];
 94c:	61 81       	ldd	r22, Z+1	; 0x01

      txMessage[0] = sciTRCV_STATUS_WORD;
 94e:	20 e3       	ldi	r18, 0x30	; 48
 950:	20 93 1a 02 	sts	0x021A, r18	; 0x80021a <txMessage>
      if(TrcvType != 0xFF)
 954:	20 91 64 01 	lds	r18, 0x0164	; 0x800164 <TrcvType>
 958:	2f 3f       	cpi	r18, 0xFF	; 255
 95a:	a9 f0       	breq	.+42     	; 0x986 <__stack+0x87>
      {
        if(TrcvType == 0x00 || TrcvType == 0x01)
 95c:	22 30       	cpi	r18, 0x02	; 2
 95e:	20 f4       	brcc	.+8      	; 0x968 <__stack+0x69>
        {          
          statusWord = trcvDio_ReadWord(0);
 960:	80 e0       	ldi	r24, 0x00	; 0
 962:	0e 94 a9 02 	call	0x552	; 0x552 <trcvDio_ReadWord>
 966:	08 c0       	rjmp	.+16     	; 0x978 <__stack+0x79>
        }
        else
        {
          if(TrcvType == 0x80 || TrcvType == 0x81)
 968:	20 58       	subi	r18, 0x80	; 128
 96a:	22 30       	cpi	r18, 0x02	; 2
 96c:	28 f4       	brcc	.+10     	; 0x978 <__stack+0x79>
      txMessage[2] = nr;
      Serial.write(txMessage, 4);
      break;

      case sciTRCV_STATUS_WORD :
      data = ((uint16)rxMessage[2] << 8) | rxMessage[3];
 96e:	83 2f       	mov	r24, r19
 970:	90 e0       	ldi	r25, 0x00	; 0
        }
        else
        {
          if(TrcvType == 0x80 || TrcvType == 0x81)
          {
            statusWord = trcvSpi_writeWord(data, aa);
 972:	94 2b       	or	r25, r20
 974:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <trcvSpi_writeWord>
          }
        }
        txMessage[1] = sciCMD_OK;
 978:	ea e1       	ldi	r30, 0x1A	; 26
 97a:	f2 e0       	ldi	r31, 0x02	; 2
 97c:	21 e0       	ldi	r18, 0x01	; 1
 97e:	21 83       	std	Z+1, r18	; 0x01
        txMessage[2] = (uint8)(statusWord >> 8);
 980:	92 83       	std	Z+2, r25	; 0x02
        txMessage[3] = (uint8)(statusWord & 0xff);
 982:	83 83       	std	Z+3, r24	; 0x03
 984:	02 c0       	rjmp	.+4      	; 0x98a <__stack+0x8b>
      }
      else
      {
        txMessage[1] = sciCMD_NOK;
 986:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <txMessage+0x1>
      }

      Serial.write(txMessage, 4);
 98a:	e0 91 76 01 	lds	r30, 0x0176	; 0x800176 <__data_end>
 98e:	f0 91 77 01 	lds	r31, 0x0177	; 0x800177 <__data_end+0x1>
 992:	02 80       	ldd	r0, Z+2	; 0x02
 994:	f3 81       	ldd	r31, Z+3	; 0x03
 996:	e0 2d       	mov	r30, r0
 998:	44 e0       	ldi	r20, 0x04	; 4
 99a:	50 e0       	ldi	r21, 0x00	; 0
 99c:	6a e1       	ldi	r22, 0x1A	; 26
 99e:	72 e0       	ldi	r23, 0x02	; 2
 9a0:	86 e7       	ldi	r24, 0x76	; 118
 9a2:	91 e0       	ldi	r25, 0x01	; 1
 9a4:	09 95       	icall
      break;
 9a6:	54 c0       	rjmp	.+168    	; 0xa50 <__stack+0x151>

      case sciCOMPLEX_OP :
      nr = rxMessage[1];
 9a8:	ee e1       	ldi	r30, 0x1E	; 30
 9aa:	f2 e0       	ldi	r31, 0x02	; 2
 9ac:	c1 81       	ldd	r28, Z+1	; 0x01
      ed = rxMessage[2];
 9ae:	12 81       	ldd	r17, Z+2	; 0x02
      aa = rxMessage[3];
 9b0:	d3 81       	ldd	r29, Z+3	; 0x03
      
      txMessage[0] = sciCOMPLEX_OP;
 9b2:	ea e1       	ldi	r30, 0x1A	; 26
 9b4:	f2 e0       	ldi	r31, 0x02	; 2
 9b6:	90 e4       	ldi	r25, 0x40	; 64
 9b8:	90 83       	st	Z, r25
      txMessage[1] = sciCMD_OK;
 9ba:	91 e0       	ldi	r25, 0x01	; 1
 9bc:	91 83       	std	Z+1, r25	; 0x01
      txMessage[2] = sciCMD_DONTCARE;
 9be:	12 82       	std	Z+2, r1	; 0x02
      txMessage[3] = sciCMD_DONTCARE;
 9c0:	13 82       	std	Z+3, r1	; 0x03

      Serial.write(txMessage, 4);
 9c2:	e0 91 76 01 	lds	r30, 0x0176	; 0x800176 <__data_end>
 9c6:	f0 91 77 01 	lds	r31, 0x0177	; 0x800177 <__data_end+0x1>
 9ca:	02 80       	ldd	r0, Z+2	; 0x02
 9cc:	f3 81       	ldd	r31, Z+3	; 0x03
 9ce:	e0 2d       	mov	r30, r0
 9d0:	44 e0       	ldi	r20, 0x04	; 4
 9d2:	50 e0       	ldi	r21, 0x00	; 0
 9d4:	6a e1       	ldi	r22, 0x1A	; 26
 9d6:	72 e0       	ldi	r23, 0x02	; 2
 9d8:	86 e7       	ldi	r24, 0x76	; 118
 9da:	91 e0       	ldi	r25, 0x01	; 1
 9dc:	09 95       	icall
      switch(nr)
 9de:	c2 30       	cpi	r28, 0x02	; 2
 9e0:	59 f0       	breq	.+22     	; 0x9f8 <__stack+0xf9>
 9e2:	28 f4       	brcc	.+10     	; 0x9ee <__stack+0xef>
 9e4:	cc 23       	and	r28, r28
 9e6:	91 f0       	breq	.+36     	; 0xa0c <__stack+0x10d>
 9e8:	c1 30       	cpi	r28, 0x01	; 1
 9ea:	49 f0       	breq	.+18     	; 0x9fe <__stack+0xff>
 9ec:	16 c0       	rjmp	.+44     	; 0xa1a <__stack+0x11b>
 9ee:	c3 30       	cpi	r28, 0x03	; 3
 9f0:	49 f0       	breq	.+18     	; 0xa04 <__stack+0x105>
 9f2:	c4 30       	cpi	r28, 0x04	; 4
 9f4:	79 f0       	breq	.+30     	; 0xa14 <__stack+0x115>
 9f6:	11 c0       	rjmp	.+34     	; 0xa1a <__stack+0x11b>
      {
        case dio_ForceTxEnTO:
        ArdComplexOp_forceTxEntimeout();
 9f8:	0e 94 62 03 	call	0x6c4	; 0x6c4 <ArdComplexOp_forceTxEntimeout>
        break;
 9fc:	29 c0       	rjmp	.+82     	; 0xa50 <__stack+0x151>

        case dio_ForceBusCollision:
        ArdComplexOp_forceBusCollition();
 9fe:	0e 94 38 03 	call	0x670	; 0x670 <ArdComplexOp_forceBusCollition>
        break;
 a02:	26 c0       	rjmp	.+76     	; 0xa50 <__stack+0x151>

        case dio_VBatDis: 
        ArdCom_ComplexOP_ClampVbat(ed);                   
 a04:	81 2f       	mov	r24, r17
 a06:	0e 94 6e 03 	call	0x6dc	; 0x6dc <ArdCom_ComplexOP_ClampVbat>
        break;
 a0a:	22 c0       	rjmp	.+68     	; 0xa50 <__stack+0x151>

        case dio_SendRemoteWU:        
        ArdComplexOp_wakeUpPattern(aa);
 a0c:	8d 2f       	mov	r24, r29
 a0e:	0e 94 0a 03 	call	0x614	; 0x614 <ArdComplexOp_wakeUpPattern>
        break;
 a12:	1e c0       	rjmp	.+60     	; 0xa50 <__stack+0x151>

        case dio_SendLocalWU:
        ArdComplexOp_lokalWakeUp();
 a14:	0e 94 2f 03 	call	0x65e	; 0x65e <ArdComplexOp_lokalWakeUp>
        break;
 a18:	1b c0       	rjmp	.+54     	; 0xa50 <__stack+0x151>

        default:
        CLAMP_GND_BP_HIGH();
 a1a:	41 9a       	sbi	0x08, 1	; 8
        CLAMP_GND_BM_HIGH();        
 a1c:	42 9a       	sbi	0x08, 2	; 8
        break;
 a1e:	18 c0       	rjmp	.+48     	; 0xa50 <__stack+0x151>
      }
      break;

      case sci_RESETALLDIOPINS:
      txMessage[0] = sci_RESETALLDIOPINS;
 a20:	ea e1       	ldi	r30, 0x1A	; 26
 a22:	f2 e0       	ldi	r31, 0x02	; 2
 a24:	80 e6       	ldi	r24, 0x60	; 96
 a26:	80 83       	st	Z, r24
      txMessage[1] = sciCMD_OK;
 a28:	81 e0       	ldi	r24, 0x01	; 1
 a2a:	81 83       	std	Z+1, r24	; 0x01
      txMessage[2] = sciCMD_DONTCARE;
 a2c:	12 82       	std	Z+2, r1	; 0x02
      txMessage[3] = sciCMD_DONTCARE;
 a2e:	13 82       	std	Z+3, r1	; 0x03
      Serial.write(txMessage, 4);
 a30:	e0 91 76 01 	lds	r30, 0x0176	; 0x800176 <__data_end>
 a34:	f0 91 77 01 	lds	r31, 0x0177	; 0x800177 <__data_end+0x1>
 a38:	02 80       	ldd	r0, Z+2	; 0x02
 a3a:	f3 81       	ldd	r31, Z+3	; 0x03
 a3c:	e0 2d       	mov	r30, r0
 a3e:	44 e0       	ldi	r20, 0x04	; 4
 a40:	50 e0       	ldi	r21, 0x00	; 0
 a42:	6a e1       	ldi	r22, 0x1A	; 26
 a44:	72 e0       	ldi	r23, 0x02	; 2
 a46:	86 e7       	ldi	r24, 0x76	; 118
 a48:	91 e0       	ldi	r25, 0x01	; 1
 a4a:	09 95       	icall

      reset_dio();
 a4c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <reset_dio>
      break;
    }
  }
 a50:	df 91       	pop	r29
 a52:	cf 91       	pop	r28
 a54:	1f 91       	pop	r17
 a56:	08 95       	ret

00000a58 <protocol_Handler>:
  *  \pre        protocol_InitMemory has been called unless protocol_ModuleInitialized is initialized by start-up code.
  *  \note
  **********************************************************************************************************************/
  /* receive a single frame */
  void protocol_Handler()
  {
 a58:	cf 93       	push	r28
 a5a:	df 93       	push	r29
    static uint8 serialFlush;

    if( Serial.available() >= 4 )
 a5c:	86 e7       	ldi	r24, 0x76	; 118
 a5e:	91 e0       	ldi	r25, 0x01	; 1
 a60:	0e 94 5f 00 	call	0xbe	; 0xbe <_ZN14HardwareSerial9availableEv>
 a64:	04 97       	sbiw	r24, 0x04	; 4
 a66:	cc f0       	brlt	.+50     	; 0xa9a <protocol_Handler+0x42>
    {
      //LEDA_TOGGLE();
      /* Read a received frame */
      rxMessage[0] = Serial.read();
 a68:	86 e7       	ldi	r24, 0x76	; 118
 a6a:	91 e0       	ldi	r25, 0x01	; 1
 a6c:	0e 94 79 00 	call	0xf2	; 0xf2 <_ZN14HardwareSerial4readEv>
 a70:	ce e1       	ldi	r28, 0x1E	; 30
 a72:	d2 e0       	ldi	r29, 0x02	; 2
 a74:	88 83       	st	Y, r24
      rxMessage[1] = Serial.read();
 a76:	86 e7       	ldi	r24, 0x76	; 118
 a78:	91 e0       	ldi	r25, 0x01	; 1
 a7a:	0e 94 79 00 	call	0xf2	; 0xf2 <_ZN14HardwareSerial4readEv>
 a7e:	89 83       	std	Y+1, r24	; 0x01
      rxMessage[2] = Serial.read();
 a80:	86 e7       	ldi	r24, 0x76	; 118
 a82:	91 e0       	ldi	r25, 0x01	; 1
 a84:	0e 94 79 00 	call	0xf2	; 0xf2 <_ZN14HardwareSerial4readEv>
 a88:	8a 83       	std	Y+2, r24	; 0x02
      rxMessage[3] = Serial.read();
 a8a:	86 e7       	ldi	r24, 0x76	; 118
 a8c:	91 e0       	ldi	r25, 0x01	; 1
 a8e:	0e 94 79 00 	call	0xf2	; 0xf2 <_ZN14HardwareSerial4readEv>
 a92:	8b 83       	std	Y+3, r24	; 0x03
      /* Decode protocol */
      protocol_Dispatcher();
 a94:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <protocol_Dispatcher>
 a98:	10 c0       	rjmp	.+32     	; 0xaba <protocol_Handler+0x62>
    }
    else
    {
      /* Timout counter handling */
      if( Serial.available() > 0 )
 a9a:	86 e7       	ldi	r24, 0x76	; 118
 a9c:	91 e0       	ldi	r25, 0x01	; 1
 a9e:	0e 94 5f 00 	call	0xbe	; 0xbe <_ZN14HardwareSerial9availableEv>
 aa2:	18 16       	cp	r1, r24
 aa4:	19 06       	cpc	r1, r25
 aa6:	34 f4       	brge	.+12     	; 0xab4 <protocol_Handler+0x5c>
      {
        serialFlush++;
 aa8:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <_ZZ16protocol_HandlerE11serialFlush>
 aac:	8f 5f       	subi	r24, 0xFF	; 255
 aae:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <_ZZ16protocol_HandlerE11serialFlush>
 ab2:	03 c0       	rjmp	.+6      	; 0xaba <protocol_Handler+0x62>
      } else
      {
        serialFlush = 0;
 ab4:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <_ZZ16protocol_HandlerE11serialFlush>
 ab8:	12 c0       	rjmp	.+36     	; 0xade <protocol_Handler+0x86>
      }
    }

    /* if timeout happened, reset receive buffer */
    if( serialFlush >= sciTIMEOUT )
 aba:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <_ZZ16protocol_HandlerE11serialFlush>
 abe:	80 32       	cpi	r24, 0x20	; 32
 ac0:	28 f4       	brcc	.+10     	; 0xacc <protocol_Handler+0x74>
 ac2:	0d c0       	rjmp	.+26     	; 0xade <protocol_Handler+0x86>
    {
      while(Serial.available() > 0)
      { /* purge receive buffer */
        (void)Serial.read();
 ac4:	86 e7       	ldi	r24, 0x76	; 118
 ac6:	91 e0       	ldi	r25, 0x01	; 1
 ac8:	0e 94 79 00 	call	0xf2	; 0xf2 <_ZN14HardwareSerial4readEv>
    }

    /* if timeout happened, reset receive buffer */
    if( serialFlush >= sciTIMEOUT )
    {
      while(Serial.available() > 0)
 acc:	86 e7       	ldi	r24, 0x76	; 118
 ace:	91 e0       	ldi	r25, 0x01	; 1
 ad0:	0e 94 5f 00 	call	0xbe	; 0xbe <_ZN14HardwareSerial9availableEv>
 ad4:	18 16       	cp	r1, r24
 ad6:	19 06       	cpc	r1, r25
 ad8:	ac f3       	brlt	.-22     	; 0xac4 <protocol_Handler+0x6c>
      { /* purge receive buffer */
        (void)Serial.read();
      }
      serialFlush = 0;
 ada:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <_ZZ16protocol_HandlerE11serialFlush>
    }
  }
 ade:	df 91       	pop	r29
 ae0:	cf 91       	pop	r28
 ae2:	08 95       	ret

00000ae4 <__udivmodsi4>:
 ae4:	a1 e2       	ldi	r26, 0x21	; 33
 ae6:	1a 2e       	mov	r1, r26
 ae8:	aa 1b       	sub	r26, r26
 aea:	bb 1b       	sub	r27, r27
 aec:	fd 01       	movw	r30, r26
 aee:	0d c0       	rjmp	.+26     	; 0xb0a <__udivmodsi4_ep>

00000af0 <__udivmodsi4_loop>:
 af0:	aa 1f       	adc	r26, r26
 af2:	bb 1f       	adc	r27, r27
 af4:	ee 1f       	adc	r30, r30
 af6:	ff 1f       	adc	r31, r31
 af8:	a2 17       	cp	r26, r18
 afa:	b3 07       	cpc	r27, r19
 afc:	e4 07       	cpc	r30, r20
 afe:	f5 07       	cpc	r31, r21
 b00:	20 f0       	brcs	.+8      	; 0xb0a <__udivmodsi4_ep>
 b02:	a2 1b       	sub	r26, r18
 b04:	b3 0b       	sbc	r27, r19
 b06:	e4 0b       	sbc	r30, r20
 b08:	f5 0b       	sbc	r31, r21

00000b0a <__udivmodsi4_ep>:
 b0a:	66 1f       	adc	r22, r22
 b0c:	77 1f       	adc	r23, r23
 b0e:	88 1f       	adc	r24, r24
 b10:	99 1f       	adc	r25, r25
 b12:	1a 94       	dec	r1
 b14:	69 f7       	brne	.-38     	; 0xaf0 <__udivmodsi4_loop>
 b16:	60 95       	com	r22
 b18:	70 95       	com	r23
 b1a:	80 95       	com	r24
 b1c:	90 95       	com	r25
 b1e:	9b 01       	movw	r18, r22
 b20:	ac 01       	movw	r20, r24
 b22:	bd 01       	movw	r22, r26
 b24:	cf 01       	movw	r24, r30
 b26:	08 95       	ret

00000b28 <__tablejump2__>:
 b28:	ee 0f       	add	r30, r30
 b2a:	ff 1f       	adc	r31, r31
 b2c:	05 90       	lpm	r0, Z+
 b2e:	f4 91       	lpm	r31, Z
 b30:	e0 2d       	mov	r30, r0
 b32:	09 94       	ijmp

00000b34 <_exit>:
 b34:	f8 94       	cli

00000b36 <__stop_program>:
 b36:	ff cf       	rjmp	.-2      	; 0xb36 <__stop_program>
